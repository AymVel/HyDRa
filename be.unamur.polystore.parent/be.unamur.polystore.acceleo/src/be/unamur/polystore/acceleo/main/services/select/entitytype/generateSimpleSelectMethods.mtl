[comment encoding = UTF-8 /]
[module generateSimpleSelectMethods('http://www.unamur.be/polystore/Pml')]
[import be::unamur::polystore::acceleo::main::util /]
[import be::unamur::polystore::acceleo::main::mappingrules::util /]
[import be::unamur::polystore::acceleo::main::impl::select::entitytype::generateSimpleSelectMethodsImpl /]
[import be::unamur::polystore::acceleo::main::impl::select::entitytype::generateSimpleSelectFromGivenRelationalTable /]
[import be::unamur::polystore::acceleo::main::impl::select::entitytype::generateSimpleSelectFromGivenDocumentCollection /]

[comment Generate abstract or implemented selection method of Pojos. 
@param override  determines the generation of the implementation

Algorithm : We need to retrieve pojos in each AbstractPhysicalStructure this pojo is mapped to. A specific collection or table in a speicfic database.
then the implementation needs to take into account the type of database in order to correctly generate the selection query (where clause in SQL or find regex for mongod, etc..) 
/]
[template public generateSimpleSelectMethods(entityType: EntityType, conceptualSchema: ConceptualSchema, override: Boolean)]

[if (override = false)]public Dataset<[entityType.name.toUpperFirst() /]> get[entityType.name.toUpperFirst() /]List(conditions.Condition<conditions.[entityType.name.toUpperFirst() /]Attribute> condition)[generateSimpleSelectMethodsImpl(entityType, conceptualSchema) /][/if]
[for (struct: AbstractPhysicalStructure | getConcernedPhysicalStructures(entityType, entityType.ancestors(Domainmodel)->first()))]
[if (struct.oclIsTypeOf(pml::EmbeddedObject) = false)]
[for (db: Database | getConcernedDatabases(struct, entityType.ancestors(Domainmodel)->first()))]
[if (override = true and (db.dbType = pml::DatabaseType::MARIADB or db.dbType = pml::DatabaseType::SQLITE))][generateGetSQLWhereClauseMethod(entityType, struct, db)/][/if]
[if (override = true and db.dbType = pml::DatabaseType::MONGODB) ][generateBSONMatchQueryMethod(entityType, struct, db) /][/if]
[if (override = true and db.dbType = pml::DatabaseType::REDIS) ]//TODO redis[/if]
public [if (override = false)]abstract [/if]Dataset<[entityType.name.toUpperFirst()/]> get[entityType.name.toUpperFirst() /]ListIn[struct.name.toUpperFirst()/]From[db.name.toUpperFirst() /](conditions.Condition<conditions.[entityType.name.toUpperFirst() /]Attribute> condition, MutableBoolean refilterFlag)[if (override = false)];[else][generateSimpleSelectFromGivenDatabase(entityType, struct, db) /][/if]

[/for]
[/if]
[/for]

// TODO get based on id(s). Ex:public Client getClientById(Long id)

[for (attr: Attribute | entityType.attributes)]
public Dataset<[entityType.name.toUpperFirst() /]> get[entityType.name.toUpperFirst() /]ListBy[attr.name.toUpperFirst()/]([generateJavaType(attr.type)/] [attr.name /]) {
	return get[entityType.name.toUpperFirst() /]List(conditions.Condition.simple(conditions.[entityType.name.toUpperFirst() /]Attribute.[attr.name /], conditions.Operator.EQUALS, [attr.name /]));
}

[/ for]
[/template]