/*
 * generated by Xtext 2.23.0
 */
package be.unamur.polystore.scoping;

import org.eclipse.emf.common.util.BasicEList;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;

import be.unamur.polystore.pml.AbstractMappingRule;
import be.unamur.polystore.pml.AbstractPhysicalStructure;
import be.unamur.polystore.pml.BracketsField;
import be.unamur.polystore.pml.Collection;
import be.unamur.polystore.pml.ColumnFamily;
import be.unamur.polystore.pml.Edge;
import be.unamur.polystore.pml.EmbeddedObject;
import be.unamur.polystore.pml.EntityMappingRule;
import be.unamur.polystore.pml.KVComplexField;
import be.unamur.polystore.pml.Key;
import be.unamur.polystore.pml.KeyValuePair;
import be.unamur.polystore.pml.LongField;
import be.unamur.polystore.pml.Node;
import be.unamur.polystore.pml.PhysicalField;
import be.unamur.polystore.pml.PmlPackage;
import be.unamur.polystore.pml.RoleToEmbbededObjectMappingRule;
import be.unamur.polystore.pml.RoleToReferenceMappingRule;
import be.unamur.polystore.pml.ShortField;
import be.unamur.polystore.pml.Table;
import be.unamur.polystore.pml.TableColumnDB;
import be.unamur.polystore.pml.TerminalExpression;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class PmlScopeProvider extends AbstractPmlScopeProvider {

	@Override
	public IScope getScope(EObject context, EReference reference) {
		if (context instanceof EntityMappingRule && reference == PmlPackage.Literals.ENTITY_MAPPING_RULE__ATTRIBUTES_CONCEPTUAL) {
			EntityMappingRule rule = EcoreUtil2.getContainerOfType(context, EntityMappingRule.class);
			return Scopes.scopeFor(rule.getEntityConceptual().getAttributes());
		}
		if((context instanceof RoleToEmbbededObjectMappingRule || context instanceof EntityMappingRule) 
				&& 
				(reference == PmlPackage.Literals.ROLE_TO_EMBBEDED_OBJECT_MAPPING_RULE__PHYSICAL_FIELDS || reference == PmlPackage.Literals.ENTITY_MAPPING_RULE__PHYSICAL_FIELDS)) {
			AbstractPhysicalStructure struct=null;
			if(context instanceof RoleToEmbbededObjectMappingRule) {
				RoleToEmbbededObjectMappingRule rule = EcoreUtil2.getContainerOfType(context, RoleToEmbbededObjectMappingRule.class);
				struct = rule.getPhysicalStructure();
			}
			if(context instanceof EntityMappingRule) {
				EntityMappingRule rule = EcoreUtil2.getContainerOfType(context, EntityMappingRule.class);
				struct = rule.getPhysicalStructure();
			}
			EList<PhysicalField> fields = new BasicEList<PhysicalField>();
			if(struct instanceof Table) 
				fields=((Table) struct).getColumns();
			if(struct instanceof Collection) 
				fields=((Collection) struct).getFields();
			if(struct instanceof EmbeddedObject)
				fields=((EmbeddedObject) struct).getFields();
			if(struct instanceof Node)
				fields= ((Node) struct).getFields();
			if(struct instanceof Edge)
				fields= ((Edge)struct).getFields();
			if(struct instanceof TableColumnDB) {
				EList<ColumnFamily> columnFamilies = ((TableColumnDB) struct).getColumnfamilies();
				for(ColumnFamily cf : columnFamilies)
					fields.addAll(cf.getColumns());
			}
			if(struct instanceof KeyValuePair) {
				KeyValuePair kvpair = (KeyValuePair)struct;
				fields.addAll(getPhysicalFieldsFromKey(kvpair.getKey()));
				fields.add(kvpair.getValue());
			}
			if(struct  instanceof KVComplexField) {
				KVComplexField kvcomplex = (KVComplexField) struct;
				fields.addAll(kvcomplex.getFields());
			}
			EList<PhysicalField> fieldsInComplex;
			fieldsInComplex= getFieldsFromLongField(fields);
			IScope scope = Scopes.scopeFor(fields);
			//fields.addAll(fieldsInComplex);
			return Scopes.scopeFor(fieldsInComplex,scope);
		}
		if(context instanceof RoleToReferenceMappingRule && reference == PmlPackage.Literals.ROLE_TO_REFERENCE_MAPPING_RULE__REFERENCE) {
			return super.getScope(context, reference);
		}
		return super.getScope(context, reference);
	}

	public EList<PhysicalField> getFieldsFromLongField(EList<PhysicalField> fields){
		EList<PhysicalField> fieldsInComplex = new BasicEList<PhysicalField>();
		for(PhysicalField field : fields) {
			if(field instanceof LongField){
				for(TerminalExpression terminal : ((LongField)field).getPattern()) {
					if(terminal instanceof BracketsField)
						fieldsInComplex.add((BracketsField)terminal);
				}
			}
		}
		return fieldsInComplex;
	}
	
	public EList<PhysicalField> getPhysicalFieldsFromKey(Key key){
		EList<PhysicalField> fields = new BasicEList<PhysicalField>();
		for(TerminalExpression terminal : key.getPattern()) {
			if(terminal instanceof BracketsField)
				fields.add((BracketsField)terminal);
		}
		return fields;
	}
}
