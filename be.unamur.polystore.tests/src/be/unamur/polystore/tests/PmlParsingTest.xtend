/*
 * generated by Xtext 2.23.0
 */
package be.unamur.polystore.tests

import be.unamur.polystore.pml.Domainmodel
import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

@ExtendWith(InjectionExtension)
@InjectWith(PmlInjectorProvider)
class PmlParsingTest {
	@Inject
	ParseHelper<Domainmodel> parseHelper
	
	@Test
	def void loadModel() {
		val result = parseHelper.parse('''
			conceptual schema cs {
				entity type Product{
					id:int,
					name:string,
					description:string
				}
				entity type Stock{
					localisation : string
				}
				relationship type productStock{
					storage [0..*] : Stock
					stored_products [1] : Product
				}
			}
			physical schema {
				document schema myDocSchema{
					collection myCollection{
						fields { 
							id,
							Name,
							Description,
							Productnumber,
							review[0..*]{
								rate
							}
						}
					}
					collection StockCollection{
						fields{
							localisation,
							products[0..*]
						}
						references{
							stores : products -> myDocSchema.myCollection.id
						}
					}
				}
				key value schema kvschema {}
				key value schema fd{}
			}
			mapping rules { 
				  cs.Product -> kvschema
				}
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
}
