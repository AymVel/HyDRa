[comment encoding = UTF-8 /]
[module generateBinaryWithAttributesSelectMethods('http://www.unamur.be/polystore/Pml')]
[import be::unamur::polystore::acceleo::main::util /]

[template public generateBinaryWithAttributesSelectMethods(entityType: EntityType, conceptualSchema: ConceptualSchema)]
[for (role: Role | getRolesFromEntityTypeInBinaryRelWithAttributes(entityType, conceptualSchema))]
public abstract java.util.List<pojo.[entityType.name.toUpperFirst() /]> get[role.name.toUpperFirst() /]ListIn[getRelationShipType(role).name.toUpperFirst() /](
	conditions.[role.entity.name.toUpperFirst() /]Attribute [role.name /]_condition,
	conditions.[(getOppositeRoles(role)->any(true)).entity.name.toUpperFirst() /]Attribute [(getOppositeRoles(role)->any(true)).name /]_condition,
	conditions.[role.getRelationShipType().name.toUpperFirst() /]Attribute [role.getRelationShipType().name /]_condition
);

public java.util.List<pojo.[entityType.name.toUpperFirst() /]> get[role.name.toUpperFirst() /]ListIn[getRelationShipType(role).name.toUpperFirst() /]By[role.name.toUpperFirst() /]Condition(conditions.[role.entity.name.toUpperFirst() /]Attribute [role.name /]_condition) {
	return get[role.name.toUpperFirst() /]ListIn[getRelationShipType(role).name.toUpperFirst() /]([role.name /]_condition, null, null);
}

public java.util.List<pojo.[entityType.name.toUpperFirst() /]> get[role.name.toUpperFirst() /]ListIn[getRelationShipType(role).name.toUpperFirst() /]By[getOppositeRoles(role)->any(true).name.toUpperFirst() /]Condition(conditions.[getOppositeRoles(role)->any(true).entity.name.toUpperFirst() /]Attribute [getOppositeRoles(role)->any(true).name /]_condition) {
	return get[role.name.toUpperFirst() /]ListIn[getRelationShipType(role).name.toUpperFirst() /](null, [getOppositeRoles(role)->any(true).name /]_condition, null);
}

public java.util.List<pojo.[entityType.name.toUpperFirst() /]> get[role.name.toUpperFirst() /]ListIn[getRelationShipType(role).name.toUpperFirst() /]By[getRelationShipType(role).name.toUpperFirst() /]Condition(conditions.[getRelationShipType(role).name.toUpperFirst() /]Attribute [getRelationShipType(role).name /]_condition) {
	return get[role.name.toUpperFirst() /]ListIn[getRelationShipType(role).name.toUpperFirst() /](null, null, [getRelationShipType(role).name /]_condition);
}

public [if (isMaxOne(getOppositeRoles(role)->any(true)) = false)]java.util.List<pojo.[role.entity.name.toUpperFirst() /]>[else]pojo.[role.entity.name.toUpperFirst() /][/if] get[role.name.toUpperFirst() /][if (isMaxOne(getOppositeRoles(role)->any(true)) = false)]List[/if]In[getRelationShipType(role).name.toUpperFirst() /]By[getOppositeRoles(role)->any(true).name.toUpperFirst() /](pojo.[getOppositeRoles(role)->any(true).entity.name.toUpperFirst()/] [getOppositeRoles(role)->any(true).name /]) {
	// TODO using id for selecting
	return null;
}

public abstract pojo.[role.entity.name.toUpperFirst() /] get[role.name.toUpperFirst() /]In[getRelationShipType(role).name.toUpperFirst() /]By[getRelationShipType(role).name.toUpperFirst() /](pojo.[getRelationShipType(role).name.toUpperFirst() /] [getRelationShipType(role).name /]);

[/for]
[/template]