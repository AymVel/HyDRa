[comment encoding = UTF-8 /]
[module generateSimpleInsertMethods('http://www.unamur.be/polystore/Pml')]
[import be::unamur::polystore::acceleo::main::util /]
[import be::unamur::polystore::acceleo::main::mappingrules::util /]
[import be::unamur::polystore::acceleo::main::impl::insert::entitytype::generateSimpleInsertMethodsImpl /]

[template public generateSimpleInsertMethods(entityType: EntityType, conceptualSchema: ConceptualSchema, override: Boolean)]
[if (getMandatoryRoles(entityType, conceptualSchema)->size() = 0)]
public [if (override = false)]abstract [/if]boolean insert[entityType.name.toUpperFirst() /]([entityType.name.toUpperFirst() /] [entityType.name.toLowerFirst() /])[if (override = false)];[else][insertPOJOImpl(entityType, conceptualSchema) /][/if]
[else]
[let complexStructList : Collection(AbstractPhysicalStructure) = getMappedComplexEmbeddedStructureOfEntity(entityType,entityType.ancestors(Domainmodel)->first() )]
	[if (complexStructList -> size()>0)]
	/**
	[entityType.name.toUpperFirst() /] is mapped to complex embedded physical structures : ['['/][for (complexStruct : AbstractPhysicalStructure | complexStructList) separator(',')][complexStruct.name/][/for][']'/]
	Please make sure parameters have their mandatory role objects setted (not null).
[for (opp: Role | getRolesOppositeToMandatoryEntityRole(entityType, conceptualSchema)) separator('\n')],
	 @param [opp.name.toLowerFirst()/][getRelationShipType(opp).name.toUpperFirst()/][/for]
	*/
[/if]
[/let]
public [if (override = false)]abstract [/if]void insert[entityType.name.toUpperFirst() /](
	[entityType.name.toUpperFirst() /] [entityType.name.toLowerFirst() /][for (role: Role | getMandatoryRoles(entityType, conceptualSchema))],
	[if (isCardinalityMaxN(role))] List<[role.getOppositeRoleInBinaryRel().entity.name.toUpperFirst() /]> [else][role.getOppositeRoleInBinaryRel().entity.name.toUpperFirst() /]	[/if][role.getOppositeRoleInBinaryRel().name.toLowerFirst()/][getRelationShipType(role).name.toUpperFirst()/][/for][for (attr: Attribute | getAttributesFromMandatoryRoles(entityType, conceptualSchema))],
	[generateJavaType(attr.type)/] [getRelationshipType(attr).name /]_[attr.name /]
	[/for]
)[if (override = false)];[else][insertPOJOInRImpl(entityType, getRolesOppositeToMandatoryEntityRole(entityType, conceptualSchema),conceptualSchema) /][/if]
[/if]

[comment insert In single database for entities having no mandatory roles (i.e single entity) /]
[comment For each mapped AbstractPhysicalStructure which contains a mapped attribute of level one (or sub level not mapped to a role). /]
[for (struct: AbstractPhysicalStructure | getMappedPhysicalStructureToInsertSingleE(entityType, entityType.ancestors(Domainmodel)->first()))]
[for (db: Database | getConcernedDatabases(struct, entityType.ancestors(Domainmodel)->first()))]
public [if (override = false)]abstract [/if]boolean insert[entityType.name.toUpperFirst() /]In[struct.name.toUpperFirst()/]From[db.name.toUpperFirst() /]([entityType.name.toUpperFirst()/] [entityType.name.toLowerFirst()/])[if (override = false)]; [else]
	{
[generateCheckExistBeforeInsert(entityType, struct, db)/]
	if(!entityExists){
[if (override = true and (db.dbType = pml::DatabaseType::MARIADB or db.dbType = pml::DatabaseType::SQLITE))]	[insertInSQLDBImpl(entityType, struct, db)/]
[elseif (override = true and db.dbType = pml::DatabaseType::MONGODB) ]	[insertInMongoDBImpl(entityType, struct, db) /]
[elseif (override = true and db.dbType = pml::DatabaseType::REDIS) ]	[insertInRedisImpl(entityType, struct, db) /]
[else]
		//other databases to implement
[/if]
		logger.info("Inserted ['['/][entityType.name/][']'/] entity ID ['['/]{}[']'/] in ['['/][struct.name.toUpperFirst()/][']'/] in database ['['/][db.name.toUpperFirst() /][']'/]", idvalue);
	}
	else
		logger.warn("['['/][entityType.name/][']'/] entity ID ['['/]{}[']'/] already present in ['['/][struct.name.toUpperFirst()/][']'/] in database ['['/][db.name.toUpperFirst() /][']'/]", idvalue);
	return !entityExists;
} 
[/if]
[/for]
[/for]

[comment Insert in structure with roles /]
[comment Insert In Structure with at least 2 cascading embedded structure with roles /]
[for (struct: AbstractPhysicalStructure | getMappedComplexEmbeddedStructureOfEntity(entityType, entityType.ancestors(Domainmodel)->first()))]
[for (db: Database | getConcernedDatabases(struct, entityType.ancestors(Domainmodel)->first()))]
public [if (override = false)]abstract [/if]boolean insert[entityType.name.toUpperFirst() /]In[struct.name.toUpperFirst()/]From[db.name.toUpperFirst() /]([entityType.name.toUpperFirst() /] [entityType.name.toLowerFirst() /][for (role: Role | getMandatoryRoles(entityType, conceptualSchema))],
	[if (isCardinalityMaxN(role))] List<[role.getOppositeRoleInBinaryRel().entity.name.toUpperFirst() /]> [else][role.getOppositeRoleInBinaryRel().entity.name.toUpperFirst() /]	[/if][role.getOppositeRoleInBinaryRel().name.toLowerFirst()/][getRelationShipType(role).name.toUpperFirst()/][/for][for (attr: Attribute | getAttributesFromMandatoryRoles(entityType, conceptualSchema))],
	[generateJavaType(attr.type)/] [getRelationshipType(attr).name /]_[attr.name /]
	[/for]
)[if (override = false)];[else]
	{
	[comment Determine if sepcific to Document DB struct /]
	[insertInComplexEmbeddedStructure(entityType, struct, db)/]
	}[/if]
[/for]
[/for]

[for (struct: AbstractPhysicalStructure | getComplexPhysicalStructures(entityType, entityType.ancestors(Domainmodel)->first()))]
[for (db: Database | getConcernedDatabases(struct, entityType.ancestors(Domainmodel)->first()))]

public [if (override = false)]abstract [/if]boolean insert[entityType.name.toUpperFirst() /]In[struct.name.toUpperFirst()/]From[db.name.toUpperFirst() /]([entityType.name.toUpperFirst() /] [entityType.name.toLowerFirst() /][for (role: Role | getMandatoryRoles(entityType, conceptualSchema))],
	[if (isCardinalityMaxN(role))] List<[role.getOppositeRoleInBinaryRel().entity.name.toUpperFirst() /]> [else][role.getOppositeRoleInBinaryRel().entity.name.toUpperFirst() /]	[/if][role.getOppositeRoleInBinaryRel().name.toLowerFirst()/][getRelationShipType(role).name.toUpperFirst()/][/for][for (attr: Attribute | getAttributesFromMandatoryRoles(entityType, conceptualSchema))],
	[generateJavaType(attr.type)/] [getRelationshipType(attr).name /]_[attr.name /]
	[/for]
)[if (override = false)];[else]
	{
	[insertInComplexStructure(entityType, struct, db)/]
	}[/if]
[/for]
[/for]
[/template]