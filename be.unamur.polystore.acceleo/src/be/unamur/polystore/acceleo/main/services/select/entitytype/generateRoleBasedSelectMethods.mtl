[comment encoding = UTF-8 /]
[module generateRoleBasedSelectMethods('http://www.unamur.be/polystore/Pml')]
[import be::unamur::polystore::acceleo::main::util /]
[import be::unamur::polystore::acceleo::main::impl::select::entitytype::generateRoleBasedSelectMethodsImpl /]

[template public generateRoleBasedSelectMethods(entity: EntityType, conceptualSchema: ConceptualSchema, override: Boolean)]
[for (role: Role | getRolesFromEntityType(entity, conceptualSchema))]
public [if (override = false)]abstract [/if]Dataset<[entity.name.toUpperFirst() /]> get[role.name.toUpperFirst() /]ListIn[getRelationShipType(role).name.toUpperFirst() /]([for (role2: Role | getRelationShipType(role).roles)][if (i > 1)],[/if]conditions.Condition<conditions.[role2.entity.name.toUpperFirst() /]Attribute> [role2.name/]_condition[/for][if (getRelationShipType(role).attributes->size() > 0)], conditions.Condition<conditions.[getRelationShipType(role).name.toUpperFirst() /]Attribute> [getRelationShipType(role).name /]_condition[/if])[if (override = false)];
[else][generateRoleBasedSelectMethodsImpl(entity, role, conceptualSchema) /][/if]

[for (role2: Role | getRelationShipType(role).roles)]
public Dataset<[entity.name.toUpperFirst() /]> get[role.name.toUpperFirst() /]ListIn[getRelationShipType(role).name.toUpperFirst() /]By[role2.name.toUpperFirst() /]Condition(conditions.Condition<conditions.[role2.entity.name.toUpperFirst()/]Attribute> [role2.name/]_condition){
	return get[role.name.toUpperFirst() /]ListIn[getRelationShipType(role).name.toUpperFirst() /]([getListOfNullValues(i - 1) /][if(i - 1 > 0)], [/if][role2.name/]_condition[getListOfNullValues(getRelationShipType(role).roles->size() -  i, true) /][if (getRelationShipType(role).attributes->size() > 0)], null[/if]);
}
[if (role2 <> role)]

public [if (isMaxOne(role2) = false)]Dataset<[entity.name.toUpperFirst() /]>[else][entity.name.toUpperFirst() /][/if] get[role.name.toUpperFirst() /][if (isMaxOne(role2) = false)]List[/if]In[getRelationShipType(role).name.toUpperFirst() /]By[role2.name.toUpperFirst() /](pojo.[role2.entity.name.toUpperFirst()/] [role2.name/]){
	Condition c;
	[if (role2.entity.identifier.oclIsUndefined())]
	c=null;
	[else]
	[if (role2.entity.identifier.attributes->size()=1)]
	c=Condition.simple([role2.entity.name.toUpperFirst() /]Attribute.[role2.entity.identifier.attributes->first().name/],Operator.EQUALS, [role2.name/].get[role2.entity.identifier.attributes->first().name.toUpperFirst()/]());
	[else]
	[let attributes : Sequence(Attribute) = role2.entity.identifier.attributes->asSequence()]
	c = Condition.and(
	Condition.simple([role2.entity.name.toUpperFirst()/]Attribute.[attributes->at(1).name /], Operator.EQUALS, [role2.name/].get[attributes->at(1).name.toUpperFirst() /]()),
	Condition.simple([role2.entity.name.toUpperFirst()/]Attribute.[attributes->at(2).name /], Operator.EQUALS, [role2.name/].get[attributes->at(2).name.toUpperFirst() /]()));
	[if (attributes->size() > 2)]
	[for (attr : Attribute | attributes->subSequence(3, attributes->size()))]
	c = Condition.and(c, Condition.simple([role2.entity.name.toUpperFirst()/]Attribute.[attr.name /], Operator.EQUALS, [role2.name/].get[attr.name.toUpperFirst() /]()));
	[/for]
	[/if]
	[/let]
	[/if]
	[/if]
	return get[role.name.toUpperFirst() /]ListIn[getRelationShipType(role).name.toUpperFirst() /]By[role2.name.toUpperFirst()/]Condition(c);
[comment]getDirected_movieListInMovieDirector(null, Condition.simple(DirectorAttribute.id, Operator.EQUALS, director.getId()));[/comment]
}

[/if]
[/for]
[if (getRelationShipType(role).attributes->size() > 0)]
public Dataset<[entity.name.toUpperFirst() /]> get[role.name.toUpperFirst() /]ListIn[getRelationShipType(role).name.toUpperFirst() /]By[getRelationShipType(role).name.toUpperFirst() /]Condition(
	conditions.Condition<conditions.[getRelationShipType(role).name.toUpperFirst()/]Attribute> [getRelationShipType(role).name/]_condition
){
	return get[role.name.toUpperFirst() /]ListIn[getRelationShipType(role).name.toUpperFirst() /]([getListOfNullValues(getRelationShipType(role).roles->size()) /], [getRelationShipType(role).name/]_condition);
}
[/if]
[/for]
[/template]