[comment encoding = UTF-8 /]
[module generateSimpleSelectMethods('http://www.unamur.be/polystore/Pml')]
[import be::unamur::polystore::acceleo::main::generateJavaDataType /]
[import be::unamur::polystore::acceleo::main::mappingrules::util /]
[import be::unamur::polystore::acceleo::main::level2::select::entitytype::generateSimpleSelectMethodsImpl /]

[template public generateSimpleSelectMethods(entityType: EntityType, conceptualSchema: ConceptualSchema, override: Boolean)]
public [if (override = false)]abstract [/if]java.util.List<pojo.[entityType.name.toUpperFirst() /]> get[entityType.name.toUpperFirst() /]List(conditions.Condition<conditions.[entityType.name.toUpperFirst() /]Attribute> condition)[if (override = false)];[else][generateSimpleSelectMethodsImpl(entityType, conceptualSchema) /][/if]

[for (db: Database | getConcernedDatabases(entityType, entityType.ancestors(Domainmodel)->first()))]
public [if (override = false)]abstract [/if]java.util.List<pojo.[entityType.name.toUpperFirst() /]> get[entityType.name.toUpperFirst() /]ListIn[db.name.toUpperFirst() /](conditions.Condition<conditions.[entityType.name.toUpperFirst() /]Attribute> condition)[if (override = false)];[else][generateSimpleSelectMethodsImpl(entityType, conceptualSchema) /][/if]
[/for]

// TODO get based on id(s). Ex:public Client getClientById(Long id)

[for (attr: Attribute | entityType.attributes)]
public java.util.List<pojo.[entityType.name.toUpperFirst() /]> get[entityType.name.toUpperFirst() /]ListBy[attr.name.toUpperFirst()/]([generateJavaType(attr.type)/] [attr.name /]) {
	return get[entityType.name.toUpperFirst() /]List(conditions.Condition.simple(conditions.[entityType.name.toUpperFirst() /]Attribute.[attr.name /], conditions.Operator.EQUALS, [attr.name /]));
}

[for (db: Database | getConcernedDatabases(attr, entityType.ancestors(Domainmodel)->first()))]
public java.util.List<pojo.[entityType.name.toUpperFirst() /]> get[entityType.name.toUpperFirst() /]ListBy[attr.name.toUpperFirst()/]In[db.name.toUpperFirst() /]([generateJavaType(attr.type)/] [attr.name /]) {
	return get[entityType.name.toUpperFirst() /]ListIn[db.name.toUpperFirst() /](conditions.Condition.simple(conditions.[entityType.name.toUpperFirst() /]Attribute.[attr.name /], conditions.Operator.EQUALS, [attr.name /]));
}
[/for]

[/ for]
[/template]