[comment encoding = UTF-8 /]
[module generateLevel1EntityTypeClasses('http://www.unamur.be/polystore/Pml')]
[import be::unamur::polystore::acceleo::main::generateEntityTypeClass /]
[import be::unamur::polystore::acceleo::main::generateRelationshipTypeClass /]
[import be::unamur::polystore::acceleo::main::level1::select::entitytype::generateSimpleSelectMethods /]
[import be::unamur::polystore::acceleo::main::level1::select::entitytype::generateSimpleBinarySelectMethods /]
[import be::unamur::polystore::acceleo::main::level1::select::entitytype::generateBinaryWithAttributesSelectMethods /]
[import be::unamur::polystore::acceleo::main::level1::select::entitytype::generateNAireSelectMethods/]
[import be::unamur::polystore::acceleo::main::util /]


[template public generateLevel1EntityTypeClass(entityType : EntityType, conceptualSchema: ConceptualSchema)]
[file ('dao/services/' + entityType.name.toUpperFirst() + 'Service'.concat('.java'), false, 'UTF-8')]
package dao.services;

public abstract class [entityType.name.toUpperFirst() + 'Service' /] {

	[printRoleConfiguration(entityType, conceptualSchema) /]
	[printSelectMethods(entityType, conceptualSchema) /]
}
[/file]
[/template]

[template public printSelectMethods(entityType: EntityType, conceptualSchema: ConceptualSchema)]
[generateSimpleSelectMethods(entityType, conceptualSchema) /]
[generateSimpleBinarySelectMethods(entityType, conceptualSchema) /]
[generateBinaryWithAttributesSelectMethods(entityType, conceptualSchema) /]
[generateNAireSelectMethods(entityType, conceptualSchema) /]
[/template]

[template public printRoleConfiguration(entityType: EntityType, conceptualSchema : ConceptualSchema)]
public static enum ROLE_NAME {
	[for (role: Role | getRolesFromEntityType(entityType, conceptualSchema))][if (i > 1)], [/if][role.eContainer(pml::RelationshipType).name.toUpperCase() /]_[role.name.toUpperCase()/][/for]
}
private static java.util.Map<ROLE_NAME, loading.Loading> defaultLoadingParameters = new java.util.HashMap<ROLE_NAME, loading.Loading>();
static {
	[for (role: Role | getRolesFromEntityType(entityType, conceptualSchema))]
	defaultLoadingParameters.put(ROLE_NAME.[role.eContainer(pml::RelationshipType).name.toUpperCase() /]_[role.name.toUpperCase()/], loading.Loading.[if (role.cardinality = pml::Cardinality::ONE or role.cardinality = pml::Cardinality::ZERO_ONE)]EAGER[else]LAZY[/if]);
	[/for]
}

private java.util.Map<ROLE_NAME, loading.Loading> loadingParameters = new java.util.HashMap<ROLE_NAME, loading.Loading>();

public [entityType.name.toUpperFirst() /]Service() {
	for(java.util.Map.Entry<ROLE_NAME, loading.Loading> entry: defaultLoadingParameters.entrySet())
		loadingParameters.put(entry.getKey(), entry.getValue());
}

public [entityType.name.toUpperFirst() /]Service(java.util.Map<ROLE_NAME, loading.Loading> loadingParams) {
	this();
	if(loadingParams != null)
		for(java.util.Map.Entry<ROLE_NAME, loading.Loading> entry: loadingParams.entrySet())
			loadingParameters.put(entry.getKey(), entry.getValue());
}

public static java.util.Map<ROLE_NAME, loading.Loading> getDefaultLoadingParameters() {
	java.util.Map<ROLE_NAME, loading.Loading> res = new java.util.HashMap<ROLE_NAME, loading.Loading>();
	for(java.util.Map.Entry<ROLE_NAME, loading.Loading> entry: defaultLoadingParameters.entrySet())
			res.put(entry.getKey(), entry.getValue());
	return res;
}

public static void setAllDefaultLoadingParameters(loading.Loading loading) {
	java.util.Map<ROLE_NAME, loading.Loading> newParams = new java.util.HashMap<ROLE_NAME, loading.Loading>();
	for(java.util.Map.Entry<ROLE_NAME, loading.Loading> entry: defaultLoadingParameters.entrySet())
			newParams.put(entry.getKey(), entry.getValue());
	defaultLoadingParameters = newParams;
}

public java.util.Map<ROLE_NAME, loading.Loading> getLoadingParameters() {
	return this.loadingParameters;
}

public void setLoadingParameters(java.util.Map<ROLE_NAME, loading.Loading> newParams) {
	this.loadingParameters = newParams;
}

public void updateLoadingParameter(ROLE_NAME role, loading.Loading l) {
	this.loadingParameters.put(role, l);
}

[/template]
