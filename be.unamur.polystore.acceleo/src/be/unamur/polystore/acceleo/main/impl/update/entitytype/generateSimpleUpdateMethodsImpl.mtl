[comment encoding = UTF-8 /]
[module generateSimpleUpdateMethodsImpl('http://www.unamur.be/polystore/Pml')]
[import be::unamur::polystore::acceleo::main::util /]
[import be::unamur::polystore::acceleo::main::mappingrules::util /]
[import be::unamur::polystore::acceleo::main::impl::insert::entitytype::generateSimpleInsertMethodsImpl /]


[template public implMethod1(entityType: EntityType, conceptualSchema: ConceptualSchema)]{
	inUpdateMethod = true;
	try {
	[for (struct: AbstractPhysicalStructure | getMappedPhysicalStructureToInsertSingleE(entityType, entityType.ancestors(Domainmodel)->first()))]
	[for (db: Database | getConcernedDatabases(struct, entityType.ancestors(Domainmodel)->first()))]
		MutableBoolean refilterIn[struct.name.toUpperFirst()/]From[db.name.toUpperFirst()/] = new MutableBoolean(false);
		[if (db.dbType.isRelational())]
		getSQLWhereClauseIn[struct.name.toUpperFirst()/]From[db.name.toUpperFirst()/](condition, refilterIn[struct.name.toUpperFirst()/]From[db.name.toUpperFirst()/]);
		[/if]
		[if (db.dbType = pml::DatabaseType::MONGODB)]
		getBSONQueryAndArrayFilterForUpdateQueryIn[struct.name.toUpperFirst()/]From[db.name.toUpperFirst()/](condition, new ArrayList<String>(), new HashSet<String>(), refilterIn[struct.name.toUpperFirst()/]From[db.name.toUpperFirst()/]);
		[/if]
		[if (db.dbType = pml::DatabaseType::REDIS)]
		//TODO
		[/if]
		// one first updates in the structures necessitating to execute a "SELECT *" query to establish the update condition 
		if(refilterIn[struct.name.toUpperFirst()/]From[db.name.toUpperFirst()/].booleanValue())
			update[entityType.name.toUpperFirst()/]ListIn[struct.name.toUpperFirst()/]From[db.name.toUpperFirst()/](condition, set);
	
	[/for]
	[/for]

	[for (struct: AbstractPhysicalStructure | getMappedPhysicalStructureToInsertSingleE(entityType, entityType.ancestors(Domainmodel)->first()))]
	[for (db: Database | getConcernedDatabases(struct, entityType.ancestors(Domainmodel)->first()))]
		if(!refilterIn[struct.name.toUpperFirst()/]From[db.name.toUpperFirst()/].booleanValue())
			update[entityType.name.toUpperFirst()/]ListIn[struct.name.toUpperFirst()/]From[db.name.toUpperFirst()/](condition, set);
	[/for]
	[/for]

	} finally {
		inUpdateMethod = false;
	}
}


[for (struct: AbstractPhysicalStructure | getMappedPhysicalStructureToInsertSingleE(entityType, entityType.ancestors(Domainmodel)->first()))]
[for (db: Database | getConcernedDatabases(struct, entityType.ancestors(Domainmodel)->first()))]
public void update[entityType.name.toUpperFirst()/]ListIn[struct.name.toUpperFirst()/]From[db.name.toUpperFirst()/](Condition<[entityType.name.toUpperFirst()/]Attribute> condition, SetClause<[entityType.name.toUpperFirst()/]Attribute> set) {
[if ((db.dbType.isRelational()))]
	[updateInSQLDBImpl(entityType, struct, db)/]
[elseif (db.dbType = pml::DatabaseType::MONGODB) ]
	[updateInMongoDBImpl(entityType, struct, db) /]
[elseif (db.dbType = pml::DatabaseType::REDIS) ]	
	[updateInRedisImpl(entityType, struct, db) /]
[else]
		//other databases to implement
[/if]
}
[/for]
[/for]


[/template]

[template public implMethod2(entityType: EntityType, conceptualSchema: ConceptualSchema)]{
	//TODO
}[/template]

[template private updateInSQLDBImpl(entity : EntityType, struct : AbstractPhysicalStructure, db : Database)]
List<String> setClause = [entity.name.toUpperFirst()/]ServiceImpl.getSQLSetClauseIn[struct.name.toUpperFirst()/]From[db.name.toUpperFirst()/](set);
String setSQL = null;
for(int i = 0; i < setClause.size(); i++) {
	if(i == 0)
		setSQL = setClause.get(i);
	else
		setSQL += ", " + setClause.get(i);
}

if(setSQL == null)
	return;

MutableBoolean refilter = new MutableBoolean(false);
Pair<String, List<String>> whereClause = [entity.name.toUpperFirst()/]ServiceImpl.getSQLWhereClauseIn[struct.name.toUpperFirst()/]From[db.name.toUpperFirst()/](condition, refilter);
if(!refilter.booleanValue()) {
	String where = whereClause.getKey();
	List<String> preparedValues = whereClause.getValue();
	for(String preparedValue : preparedValues) {
		where = where.replaceFirst("\\?", preparedValue);
	}
	
	String sql = "UPDATE [struct.name/] SET " + setSQL;
	if(where != null)
		sql += " WHERE " + where;
	
	DBConnectionMgr.updateInTable(sql, "[db.name/]");
} else {
	if(!inUpdateMethod || all[entity.name.toUpperFirst()/]IdList == null)
		all[entity.name.toUpperFirst()/]IdList = this.get[entity.name.toUpperFirst()/]List(condition).select([if (entity.identifier.oclIsUndefined() = false)][for (attr : Attribute | entity.identifier.attributes) separator(',')]"[attr.name/]"[/for][/if]).collectAsList();

	List<String> updateQueries = new ArrayList<String>();
	for(Row row : all[entity.name.toUpperFirst()/]IdList) {
		Condition<[entity.name.toUpperFirst()/]Attribute> conditionId = null;
		[if (entity.identifier.oclIsUndefined() = false)]
		[for (attr : Attribute | entity.identifier.attributes)]
		[if (i = 1)]
		conditionId = Condition.simple([entity.name.toUpperFirst()/]Attribute.[attr.name.toLowerFirst()/], Operator.EQUALS, row.getAs("[attr.name.toLowerFirst()/]"));
		[else]
		conditionId = Condition.and(conditionId, Condition.simple([entity.name.toUpperFirst()/]Attribute.[attr.name.toLowerFirst()/], Operator.EQUALS, row.getAs("[attr.name.toLowerFirst()/]")));
		[/if]
		[/for]
		[/if]
		whereClause = [entity.name.toUpperFirst()/]ServiceImpl.getSQLWhereClauseIn[struct.name.toUpperFirst()/]From[db.name.toUpperFirst()/](conditionId, refilter);
		String sql = "UPDATE [struct.name/] SET " + setSQL;
		String where = whereClause.getKey();
		List<String> preparedValues = whereClause.getValue();
		for(String preparedValue : preparedValues) {
			where = where.replaceFirst("\\?", preparedValue);
		}
		if(where != null)
			sql += " WHERE " + where;
		updateQueries.add(sql);
	}

	DBConnectionMgr.updatesInTable(updateQueries, "[db.name/]");
}

[/template]

[template private updateInDescendingMongoDBImpl(entityType : EntityType, struct : AbstractPhysicalStructure, db : Database)]

}
[/template]

[template private updateInMongoDBImpl(entityType : EntityType, struct : AbstractPhysicalStructure, db : Database)]
Pair<List<String>, List<String>> updates = getBSONUpdateQueryIn[struct.name.toUpperFirst()/]From[db.name.toUpperFirst()/](set);
List<String> sets = updates.getLeft();
final List<String> arrayVariableNames = updates.getRight();
String setBSON = null;
for(int i = 0; i < sets.size(); i++) {
	if(i == 0)
		setBSON = sets.get(i);
	else
		setBSON += ", " + sets.get(i);
}

if(setBSON == null)
	return;

Document updateQuery = null;
setBSON = "{$set: {" + setBSON + "}}";
updateQuery = Document.parse(setBSON);

MutableBoolean refilter = new MutableBoolean(false);
Set<String> arrayVariablesUsed = new HashSet<String>();
Pair<String, List<String>> queryAndArrayFilter = getBSONQueryAndArrayFilterForUpdateQueryIn[struct.name.toUpperFirst()/]From[db.name.toUpperFirst()/](condition, arrayVariableNames, arrayVariablesUsed, refilter);
Document query = null;
String bsonQuery = queryAndArrayFilter.getLeft();
if(bsonQuery != null) {
	bsonQuery = "{" + bsonQuery + "}";
	query = Document.parse(bsonQuery);	
}

List<Bson> arrayFilterDocs = new ArrayList<Bson>();
List<String> arrayFilters = queryAndArrayFilter.getRight();
for(String arrayFilter : arrayFilters)
	arrayFilterDocs.add(Document.parse( "{" + arrayFilter + "}"));

for(String arrayVariableName : arrayVariableNames)
	if(!arrayVariablesUsed.contains(arrayVariableName)) {
		arrayFilterDocs.add(Document.parse("{" + arrayVariableName + ": {$exists: true}}"));
	}


if(!refilter.booleanValue()) {
	if(arrayFilterDocs.size() == 0) {
		DBConnectionMgr.update(query, updateQuery, "[struct.name/]", "[db.name/]");
	} else {
		DBConnectionMgr.upsertMany(query, updateQuery, arrayFilterDocs, "[struct.name/]", "[db.name/]");
	}

	
} else {
	if(!inUpdateMethod || all[entityType.name.toUpperFirst()/]IdList == null)
		all[entityType.name.toUpperFirst()/]IdList = this.get[entityType.name.toUpperFirst()/]List(condition).select([if (entityType.identifier.oclIsUndefined() = false)][for (attr : Attribute | entityType.identifier.attributes) separator(',')]"[attr.name/]"[/for][/if]).collectAsList();
	List<com.mongodb.client.model.UpdateManyModel<Document>> updateQueries = new ArrayList<com.mongodb.client.model.UpdateManyModel<Document>>();
	for(Row row : all[entityType.name.toUpperFirst()/]IdList) {
		Condition<[entityType.name.toUpperFirst()/]Attribute> conditionId = null;
		[if (entityType.identifier.oclIsUndefined() = false)]
		[for (attr : Attribute | entityType.identifier.attributes)]
		[if (i = 1)]
		conditionId = Condition.simple([entityType.name.toUpperFirst()/]Attribute.[attr.name.toLowerFirst()/], Operator.EQUALS, row.getAs("[attr.name.toLowerFirst()/]"));
		[else]
		conditionId = Condition.and(conditionId, Condition.simple([entityType.name.toUpperFirst()/]Attribute.[attr.name.toLowerFirst()/], Operator.EQUALS, row.getAs("[attr.name.toLowerFirst()/]")));
		[/if]
		[/for]
		[/if]

		arrayVariablesUsed = new HashSet<String>();
		queryAndArrayFilter = getBSONQueryAndArrayFilterForUpdateQueryIn[struct.name.toUpperFirst()/]From[db.name.toUpperFirst()/](conditionId, arrayVariableNames, arrayVariablesUsed, refilter);
		query = null;
		bsonQuery = queryAndArrayFilter.getLeft();
		if(bsonQuery != null) {
			bsonQuery = "{" + bsonQuery + "}";
			query = Document.parse(bsonQuery);	
		}
		
		arrayFilterDocs = new ArrayList<Bson>();
		arrayFilters = queryAndArrayFilter.getRight();
		for(String arrayFilter : arrayFilters)
			arrayFilterDocs.add(Document.parse( "{" + arrayFilter + "}"));
		
		for(String arrayVariableName : arrayVariableNames)
			if(!arrayVariablesUsed.contains(arrayVariableName)) {
				arrayFilterDocs.add(Document.parse("{" + arrayVariableName + ": {$exists: true}}"));
			}
		if(arrayFilterDocs.size() == 0)
			updateQueries.add(new com.mongodb.client.model.UpdateManyModel<Document>(query, updateQuery));
		else
			updateQueries.add(new com.mongodb.client.model.UpdateManyModel<Document>(query, updateQuery, new com.mongodb.client.model.UpdateOptions().arrayFilters(arrayFilterDocs)));
	}

	DBConnectionMgr.bulkUpdatesInMongoDB(updateQueries, "[struct.name/]", "[db.name/]");
}
[/template]

[template private updateInRedisImpl(entity : EntityType, struct : AbstractPhysicalStructure, db : Database)]
//TODO
[/template]