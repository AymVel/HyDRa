[comment encoding = UTF-8 /]
[module generateSimpleInsertMethodsImpl('http://www.unamur.be/polystore/Pml')]
[import be::unamur::polystore::acceleo::main::mappingrules::util /]
[import be::unamur::polystore::acceleo::main::util /]

[template public implMethod1(entityType: EntityType, conceptualSchema: ConceptualSchema)]{
	//TODO
}[/template]

[template public insertPOJOImpl(entityType: EntityType, conceptualSchema: ConceptualSchema)]{
	// Insert into all mapped AbstractPhysicalStructure 
	[for (struct: AbstractPhysicalStructure | getMappedPhysicalStructureToInsertE(entityType, entityType.ancestors(Domainmodel)->first()))]
	[for (db: Database | getConcernedDatabases(struct, entityType.ancestors(Domainmodel)->first()))]
		insert[entityType.name.toUpperFirst() /]In[struct.name.toUpperFirst()/]From[db.name.toUpperFirst() /]([entityType.name.toLowerFirst()/]);
	[/for]
	[/for]
}[/template]

[template public implMethod3(entityType: EntityType, conceptualSchema: ConceptualSchema)]{
	//TODO
}[/template]

	
[template public insertInSQLDBImpl(entityType : EntityType, struct : AbstractPhysicalStructure, db : Database)]
[comment insertEInRELTABLE(ENT e) /]
{
	List<Object> values = new ArrayList<>();
	List<StructField> listOfStructuField = new ArrayList<StructField>();
[for (field : PhysicalField | struct.oclAsType(Table).columns)]
	[if (field.oclIsTypeOf(ShortField))]
		[let attr : Attribute = getMappedAttributes(field, entityType, entityType.getMappingRules())->any(true)]
			[if (attr.oclIsUndefined()=false)]
	listOfStructuField.add(DataTypes.createStructField("[getPhysicalName(field)/]",[generateSparkDataType(attr.type)/], true));
	values.add([entityType.name.toLowerFirst()/].get[attr.name.toUpperFirst()/]());
			[/if]
		[/let] 
	[/if]
	[if (field.oclIsTypeOf(LongField))]
		[comment LongField with only one component and is BracketsField /]
		[if (field.oclAsType(LongField).pattern->size()=1 and field.oclAsType(LongField).pattern->any(true).oclIsTypeOf(BracketsField))]
			[let brackets : BracketsField = field.oclAsType(LongField).pattern->any(true).oclAsType(BracketsField)]
				[let attr : Attribute = getMappedAttributes(field, entityType, entityType.getMappingRules())->any(true)]
				[if (attr.oclIsUndefined()=false)]
	listOfStructuField.add(DataTypes.createStructField("[getPhysicalName(field)/]",[generateSparkDataType(attr.type)/], true));
	values.add([entityType.name.toLowerFirst()/].get[attr.name.toUpperFirst()/]());
				[/if]
				[/let] 
			[/let]
		[else]
			[if (field.oclAsType(LongField).pattern->filter(BracketsField)->exists(b |getMappedAttributes(b, entityType, entityType.getMappingRules())->size()=0)=false)]
				[comment All BracketsField are mapped to the corresponding entity /]
				[comment LongField is composed of component, therefore can only be StringType /]
	String value = "";
				[for (component : TerminalExpression | field.oclAsType(LongField).pattern)]
					[if (component.oclIsTypeOf(BracketsField))]
						[let attr : Attribute = getMappedAttributes(component.oclAsType(BracketsField), entityType, entityType.getMappingRules())->any(true)]
	value += [entityType.name.toLowerFirst()/].get[attr.name.toUpperFirst()/]();
						[/let]
					[else]
	value += "[component.literal/]";
					[/if]
				[/for]
	listOfStructuField.add(DataTypes.createStructField("[getPhysicalName(field)/]",DataTypes.StringType, true));
	values.add(value);
			[/if]
		[/if]
	[/if]
[/for]
	List<Row> list=new ArrayList<Row>();
	list.add(RowFactory.create(values.toArray()));
	SparkConnectionMgr.writeDataset(list, listOfStructuField, "jdbc", "[struct.name/]", "[db.databaseName/]");
}
[/template]


[template public insertInMongoDBImpl(entityType : EntityType, struct : AbstractPhysicalStructure, db : Database)]
{
	//Read mapping rules and find attributes of the POJO that are mapped to the corresponding AbstractPhysicalStructure
	// Insert in MongoDB
}
[/template]

[query private getMappedAttributesInStructure(ent: EntityType, struct : AbstractPhysicalStructure, db : Database, rules: MappingRules) : Collection(Attribute) =  
	invoke('be.unamur.polystore.acceleo.main.utils.Util', 'getMappedAttributes(be.unamur.polystore.pml.EntityType, be.unamur.polystore.pml.AbstractPhysicalStructure, be.unamur.polystore.pml.Database, be.unamur.polystore.pml.MappingRules)', Sequence{ent, struct, db, rules})
/]


[query private getRefOfPhysicalStructure(struct : AbstractPhysicalStructure) : Collection(Reference) =  
	invoke('be.unamur.polystore.acceleo.main.utils.MappingRuleService', 'getRefOfPhysicalStructure(be.unamur.polystore.pml.AbstractPhysicalStructure)', Sequence{struct})
/]
