[comment encoding = UTF-8 /]
[module generateRoleBasedSelectMethodsImpl('http://www.unamur.be/polystore/Pml')]

[import be::unamur::polystore::acceleo::main::mappingrules::util /]
[import be::unamur::polystore::acceleo::main::util /]


[template public generateRoleBasedSelectMethodsImpl(entity: EntityType, role: Role, conceptualSchema: ConceptualSchema)]{
[if (role.getRelationShipType().roles -> size() = 2 and role.getRelationShipType().attributes -> size() = 0)]
List<Dataset<[entity.name.toUpperFirst() /]>> datasetsPOJO = new ArrayList<Dataset<[entity.name.toUpperFirst() /]>>();
[let role2 : Role = getOppositeRoles(role)->any(true)]
[for (ref: Reference | getMappedReferences(role, conceptualSchema.getMappingRules()))]
Dataset<[entity.name.toUpperFirst()/]TDO> [entity.name.toLowerFirst()/]TDO[ref.name/] = [role.getRelationShipType().name.toLowerFirst()/]Service.get[entity.name.toUpperFirst()/]TDOList[role.name.toUpperFirst() /]In[ref.name.toUpperFirst()/]In[ref.getAbstractPhysicalStructureNotEmbeddedObject().name.toUpperFirst() /]From[ref.getPhysicalSchema().name.toUpperFirst()/]([role.name/]_condition);
Dataset<[role2.entity.name.toUpperFirst()/]TDO> [role2.entity.name.toLowerFirst()/]TDO[ref.name/] = [role.getRelationShipType().name.toLowerFirst()/]Service.get[role2.entity.name.toUpperFirst()/]TDOList[role2.name.toUpperFirst() /]In[ref.name.toUpperFirst()/]In[ref.getAbstractPhysicalStructureNotEmbeddedObject().name.toUpperFirst() /]From[ref.getPhysicalSchema().name.toUpperFirst()/]([role2.name/]_condition);
[comment TODO Multi valued refernece not handled /]
Dataset<Row> res_[ref.name/] = [entity.name.toLowerFirst()/]TDO[ref.name/].join([role2.entity.name.toLowerFirst()/]TDO[ref.name/]
[for (attr : Attribute | role2.entity.attributes)]
		.withColumnRenamed("[attr.name.toLowerFirst() /]", "[role2.entity.name/]_[attr.name.toLowerFirst() /]")
[/for]		,[entity.name.toLowerFirst()/]TDO[ref.name/].col("[getJavaAbsolutePath(ref) /]_[ref.sourceField->first().getPhysicalName()/]").equalTo([role2.entity.name.toLowerFirst()/]TDO[ref.name/].col("[getJavaAbsolutePath(ref) /]_[ref.targetField->first().getPhysicalName()/]")));
Dataset<[entity.name.toUpperFirst()/]> res_[entity.name/]_[ref.name/] = res_[ref.name/].select([for (attr : Attribute | entity.attributes) separator(',')] "[attr.name/]"[/for]).as(Encoders.bean([entity.name.toUpperFirst()/].class));
datasetsPOJO.add(res_[entity.name/]_[ref.name/]);
[/for]

[for (ref: Reference | getMappedReferences(role2, conceptualSchema.getMappingRules()))]
Dataset<[role2.entity.name.toUpperFirst()/]TDO> [role2.entity.name.toLowerFirst()/]TDO[ref.name/] = [role.getRelationShipType().name.toLowerFirst()/]Service.get[role2.entity.name.toUpperFirst()/]TDOList[role2.name.toUpperFirst() /]In[ref.name.toUpperFirst()/]In[ref.getAbstractPhysicalStructureNotEmbeddedObject().name.toUpperFirst() /]From[ref.getPhysicalSchema().name.toUpperFirst()/]([role2.name/]_condition);
Dataset<[entity.name.toUpperFirst()/]TDO> [entity.name.toLowerFirst()/]TDO[ref.name/] = [role.getRelationShipType().name.toLowerFirst()/]Service.get[entity.name.toUpperFirst()/]TDOList[role.name.toUpperFirst() /]In[ref.name.toUpperFirst()/]In[ref.getAbstractPhysicalStructureNotEmbeddedObject().name.toUpperFirst() /]From[ref.getPhysicalSchema().name.toUpperFirst()/]([role.name/]_condition);
[comment TODO Multi valued refernece not handled /]
Dataset<Row> res_[ref.name/] = [entity.name.toLowerFirst()/]TDO[ref.name/].join([role2.entity.name.toLowerFirst()/]TDO[ref.name/]
[for (attr : Attribute | role2.entity.attributes)]
		.withColumnRenamed("[attr.name.toLowerFirst() /]", "[role2.entity.name/]_[attr.name.toLowerFirst() /]")
[/for],[entity.name.toLowerFirst()/]TDO[ref.name/].col("[getJavaAbsolutePath(ref) /]_[ref.targetField->first().getPhysicalName()/]").equalTo([role2.entity.name.toLowerFirst()/]TDO[ref.name/].col("[getJavaAbsolutePath(ref) /]_[ref.sourceField->first().getPhysicalName()/]")));
Dataset<[entity.name.toUpperFirst()/]> res_[entity.name/]_[ref.name/] = res_[ref.name/].select([for (attr : Attribute | entity.attributes) separator(',')] "[attr.name/]"[/for]).as(Encoders.bean([entity.name.toUpperFirst()/].class));
datasetsPOJO.add(res_[entity.name/]_[ref.name/]);
[/for]
[/let]
//Join datasets or return 
if(datasetsPOJO.size() == 0)
		return null;
if(datasetsPOJO.size() == 1)
	return datasetsPOJO.get(0);
if(datasetsPOJO.size() > 1) {
	[generateJoinDatasets(entity)/]
}
return null;
[else]
// Not implemented yet for > 2 roles
return null;
[/if]
}
[/template]

[template public generateJoinDatasets(entityType : EntityType)]
	Dataset<[entityType.name.toUpperFirst()/]> d = datasetsPOJO.get(0);
	[if (entityType.identifier.oclIsUndefined() = false and entityType.identifier.attributes-> size() > 0)]
		List<String> idFields = new ArrayList<String>();
		[for (attr : Attribute | entityType.identifier.attributes)]
		idFields.add("[attr.name /]");
		[/for]
		scala.collection.Seq<String> seq = scala.collection.JavaConverters.asScalaIteratorConverter(idFields.iterator()).asScala().toSeq();
		Dataset<Row> res = d.join(datasetsPOJO.get(1)
	[for (attr : Attribute | entityType.attributes)][if (entityType.identifier.attributes->includes(attr) = false)]
							.withColumnRenamed("[attr.name.toLowerFirst() /]", "[attr.name.toLowerFirst() /]_1")
	[/if][/for]						, seq, "fullouter");
		for(int i = 2; i < datasetsPOJO.size(); i++) {
			res = res.join(datasetsPOJO.get(i)
	[for (attr : Attribute | entityType.attributes)][if (entityType.identifier.attributes->includes(attr) = false)]
							.withColumnRenamed("[attr.name.toLowerFirst() /]", "[attr.name.toLowerFirst() /]_" + i)
	[/if][/for]						, seq, "fullouter");
		} 
		d = res.map((MapFunction<Row, [entityType.name.toUpperFirst() /]>) r -> {
				[entityType.name.toUpperFirst() /] [entityType.name.toLowerFirst() /]_res = new [entityType.name.toUpperFirst() /]();
				[for (attr : Attribute | entityType.attributes)]
				
				// attribute '[entityType.name.toUpperFirst() /].[attr.name.toLowerFirst() /]'
				[generateJavaType(attr.type) /] firstNotNull_[attr.name /] = r.getAs("[attr.name.toLowerFirst() /]");
				[if (entityType.identifier.attributes->includes(attr) = false)]
				for (int i = 1; i < datasetsPOJO.size(); i++) {
					[generateJavaType(attr.type) /] [attr.name.toLowerFirst() /]2 = r.getAs("[attr.name.toLowerFirst() /]_" + i);
					if (firstNotNull_[attr.name /] != null && [attr.name.toLowerFirst() /]2 != null && !firstNotNull_[attr.name/].equals([attr.name.toLowerFirst() /]2)) {
						logger.warn("data consistency problem: duplicate values for attribute : '[entityType.name.toUpperFirst() /].[attr.name.toLowerFirst() /]' ==> " + firstNotNull_[attr.name /] + " and " + [attr.name.toLowerFirst() /]2);
					}
					if (firstNotNull_[attr.name /] == null && [attr.name.toLowerFirst() /]2 != null) {
						firstNotNull_[attr.name /] = [attr.name.toLowerFirst() /]2;
					}
				}
				[/if]
				[entityType.name.toLowerFirst() /]_res.set[attr.name.toUpperFirst() /](firstNotNull_[attr.name /]);
				[/for]
				return [entityType.name.toLowerFirst() /]_res;
			}, Encoders.bean([entityType.name.toUpperFirst() /].class));
		return d;
		[else]
		for(int i = 1; i < datasetsPOJO.size(); i++)
			d = d.union(datasetsPOJO.get(i));
		return d;
		[/if]
[/template]
