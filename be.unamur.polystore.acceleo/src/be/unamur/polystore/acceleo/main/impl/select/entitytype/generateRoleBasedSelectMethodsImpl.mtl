[comment encoding = UTF-8 /]
[module generateRoleBasedSelectMethodsImpl('http://www.unamur.be/polystore/Pml')]

[import be::unamur::polystore::acceleo::main::mappingrules::util /]
[import be::unamur::polystore::acceleo::main::util /]


[template public generateRoleBasedSelectMethodsImpl(entity: EntityType, role: Role, conceptualSchema: ConceptualSchema)]{
[if (role.getRelationShipType().roles -> size() = 2 and role.getRelationShipType().attributes -> size() = 0)]
[let role2 : Role = getOppositeRoles(role)->any(true)]
[for (ref: Reference | getMappedReferences(role, conceptualSchema.getMappingRules()))]
Dataset<[entity.name.toUpperFirst()/]TDO> [entity.name.toLowerFirst()/]TDO[ref.name/] = [role.getRelationShipType().name.toLowerFirst()/]Service.get[entity.name.toUpperFirst()/]TDOList[role.name.toUpperFirst() /]In[ref.name.toUpperFirst()/]In[ref.getAbstractPhysicalStructure().name.toUpperFirst() /]From[ref.getPhysicalSchema().name.toUpperFirst()/]([role.name/]_condition);
Dataset<[role2.entity.name.toUpperFirst()/]TDO> [role2.entity.name.toLowerFirst()/]TDO[ref.name/] = [role.getRelationShipType().name.toLowerFirst()/]Service.get[role2.entity.name.toUpperFirst()/]TDOList[role2.name.toUpperFirst() /]In[ref.name.toUpperFirst()/]In[ref.getAbstractPhysicalStructure().name.toUpperFirst() /]From[ref.getPhysicalSchema().name.toUpperFirst()/]([role2.name/]_condition);
[comment TODO Multi valued refernece not handled /]
Dataset<Row> res_[ref.name/] = [entity.name.toLowerFirst()/]TDO[ref.name/].join([role2.entity.name.toLowerFirst()/]TDO[ref.name/]
[for (attr : Attribute | role2.entity.attributes)]
		.withColumnRenamed("[attr.name.toLowerFirst() /]", "[role2.entity.name/]_[attr.name.toLowerFirst() /]")
[/for]		,[entity.name.toLowerFirst()/]TDO[ref.name/].col("[getJavaAbsolutePath(ref) /]_[ref.sourceField->first().getPhysicalName()/]").equalTo([role2.entity.name.toLowerFirst()/]TDO[ref.name/].col("[getJavaAbsolutePath(ref) /]_[ref.targetField->first().getPhysicalName()/]")));
Dataset<[entity.name.toUpperFirst()/]> res_[entity.name/] = res_[ref.name/].select([for (attr : Attribute | entity.attributes) separator(',')] "[attr.name/]"[/for]).as(Encoders.bean([entity.name.toUpperFirst()/].class));
return res_[entity.name/];
[/for]

[for (ref: Reference | getMappedReferences(role2, conceptualSchema.getMappingRules()))]
Dataset<[role2.entity.name.toUpperFirst()/]TDO> [role2.entity.name.toLowerFirst()/]TDO[ref.name/] = [role.getRelationShipType().name.toLowerFirst()/]Service.get[role2.entity.name.toUpperFirst()/]TDOList[role2.name.toUpperFirst() /]In[ref.name.toUpperFirst()/]In[ref.getAbstractPhysicalStructure().name.toUpperFirst() /]From[ref.getPhysicalSchema().name.toUpperFirst()/]([role2.name/]_condition);
Dataset<[entity.name.toUpperFirst()/]TDO> [entity.name.toLowerFirst()/]TDO[ref.name/] = [role.getRelationShipType().name.toLowerFirst()/]Service.get[entity.name.toUpperFirst()/]TDOList[role.name.toUpperFirst() /]In[ref.name.toUpperFirst()/]In[ref.getAbstractPhysicalStructure().name.toUpperFirst() /]From[ref.getPhysicalSchema().name.toUpperFirst()/]([role.name/]_condition);
[comment TODO Multi valued refernece not handled /]
Dataset<Row> res_[ref.name/] = [entity.name.toLowerFirst()/]TDO[ref.name/].join([role2.entity.name.toLowerFirst()/]TDO[ref.name/]
[for (attr : Attribute | role2.entity.attributes)]
		.withColumnRenamed("[attr.name.toLowerFirst() /]", "[role2.entity.name/]_[attr.name.toLowerFirst() /]")
[/for],[entity.name.toLowerFirst()/]TDO[ref.name/].col("[getJavaAbsolutePath(ref) /]_[ref.targetField->first().getPhysicalName()/]").equalTo([role2.entity.name.toLowerFirst()/]TDO[ref.name/].col("[getJavaAbsolutePath(ref) /]_[ref.sourceField->first().getPhysicalName()/]")));
Dataset<[entity.name.toUpperFirst()/]> res_[entity.name/] = res_[ref.name/].select([for (attr : Attribute | entity.attributes) separator(',')] "[attr.name/]"[/for]).as(Encoders.bean([entity.name.toUpperFirst()/].class));
return res_[entity.name/];
[/for]

[/let]
[/if]
}
[/template]
