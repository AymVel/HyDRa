[comment encoding = UTF-8 /]
[module generateSelectMethodsImpl('http://www.unamur.be/polystore/Pml')]
[import be::unamur::polystore::acceleo::main::mappingrules::util /]
[import be::unamur::polystore::acceleo::main::util /]


[template public implMethod1(rel: RelationshipType, conceptualSchema: ConceptualSchema)]{
	[if (rel.roles -> size() = 2)]
	[let role : Role = rel.roles->first()]
	[let role2 : Role = getOppositeRoles(role)->any(true)]
	[role.getRelationShipType().name.toUpperFirst()/]ServiceImpl [role.getRelationShipType().name.toLowerFirst()/]Service = this;
	[role.entity.name.toUpperFirst()/]Service [role.entity.name.toLowerFirst()/]Service = new [role.entity.name.toUpperFirst()/]ServiceImpl();  
	[if not(role.entity.name=role2.entity.name)]
	[role2.entity.name.toUpperFirst()/]Service [role2.entity.name.toLowerFirst()/]Service = new [role2.entity.name.toUpperFirst()/]ServiceImpl();
	[/if]
	MutableBoolean [role.name/]_refilter = new MutableBoolean(false);
	List<Dataset<[rel.name.toUpperFirst() /]>> datasetsPOJO = new ArrayList<Dataset<[rel.name.toUpperFirst() /]>>();
	boolean all_already_persisted = false;
	MutableBoolean [role2.name/]_refilter = new MutableBoolean(false);
	[if(role.getRelationShipType().attributes->size()>0)]MutableBoolean [role.getRelationShipType().name/]_refilter = new MutableBoolean(false);[/if]
	org.apache.spark.sql.Column joinCondition = null;
	[for (ref: Reference | getMappedReferences(role, conceptualSchema.getMappingRules()))]
			[if (hasMappedReferenceInSamePhysicalStructureForOppoisteRole(role2, ref.getAbstractPhysicalStructureNotEmbeddedObject()))]
				[let ref2 : Reference = getMappedReferenceInSamePhysicalStructureForOppositeRole(role2, ref.getAbstractPhysicalStructureNotEmbeddedObject())]
	// join physical structure A<-AB->B
	[comment  
	// role et role2 sont dans la même structure => join table
	// A <- AB -> B  /]
	[generateCodeForJoinPhysicalStructure(role, ref, role2, ref2)/]
				[/let]
			[/if]
			[if (hasMappedReferenceInSamePhysicalStructureForOppoisteRole(role2, ref.getAbstractPhysicalStructureNotEmbeddedObject()) = false)]
	[comment // A -> B /] 
	[comment  // Il n'existe pas de ref2 mappé à Role2 qui soit dans la même structure que Ref. -> Pas de table de jointure /]
				[let struct1 : AbstractPhysicalStructure = ref.getAbstractPhysicalStructureNotEmbeddedObject()]
				[let struct2 : AbstractPhysicalStructure = ref.targetField->first().getAbstractPhysicalStructureNotEmbeddedObject()]
				[let db1 : Database = struct1.getConcernedDatabases(struct1.ancestors(Domainmodel)->first())->any(true)]
				[let db2 : Database = struct2.getConcernedDatabases(struct2.ancestors(Domainmodel)->first())->any(true)]
				[if (db1 = db2 and db1.dbType.isRelational())]
	[comment A & B same db, so we are able to get both objects with one SQL. No need for TDO objects. Use of RelPOJO /]
	// For role '[role.name/]' in reference '[ref.name/]'. A->B Scenario in SQL DB
	[role2.name/]_refilter = new MutableBoolean(false);
	Dataset<[role.getRelationShipType().name.toUpperFirst()/]> res_[ref.name/] = [role.getRelationShipType().name.toLowerFirst()/]Service.get[role.name.toUpperFirst()/]And[role.getOppositeRoles()->any(true).name.toUpperFirst()/]ListIn[ref.name.toUpperFirst()/]In[struct1.name.toUpperFirst()/]From[db1.name.toUpperFirst()/]([role.getRelationShipType().roles->first().name/]_condition, [role.getRelationShipType().roles->first().getOppositeRoles()->any(true).name/]_condition, [role.name/]_refilter, [role2.name/]_refilter);
	[else]
	[comment A & B not in same DB or involve NoSQL struct. So need of TDO objects /]
	// For role '[role.name/]' in reference '[ref.name/]'. A->B Scenario
	[role2.name/]_refilter = new MutableBoolean(false);
	Dataset<[role.entity.name.toUpperFirst()/]TDO> [role.entity.name.toLowerFirst()/]TDO[ref.name/][role.name/] = [role.getRelationShipType().name.toLowerFirst()/]Service.get[role.entity.name.toUpperFirst()/]TDOList[role.name.toUpperFirst() /]In[ref.name.toUpperFirst()/]In[ref.getAbstractPhysicalStructureNotEmbeddedObject().name.toUpperFirst() /]From[ref.getPhysicalSchema().name.toUpperFirst()/]([role.name/]_condition, [role.name/]_refilter);
	Dataset<[role2.entity.name.toUpperFirst()/]TDO> [role2.entity.name.toLowerFirst()/]TDO[ref.name/][role2.name/] = [role.getRelationShipType().name.toLowerFirst()/]Service.get[role2.entity.name.toUpperFirst()/]TDOList[role2.name.toUpperFirst() /]In[ref.name.toUpperFirst()/]In[ref.getAbstractPhysicalStructureNotEmbeddedObject().name.toUpperFirst() /]From[ref.getPhysicalSchema().name.toUpperFirst()/]([role2.name/]_condition, [role2.name/]_refilter);
	
	Dataset<Row> res_[ref.name/]_temp = [role.entity.name.toLowerFirst()/]TDO[ref.name/][role.name/].join([role2.entity.name.toLowerFirst()/]TDO[ref.name/][role2.name/]
					[for (attr : Attribute | role2.entity.attributes)]
			.withColumnRenamed("[attr.name.toLowerFirst() /]", "[role2.entity.name/]_[attr.name.toLowerFirst() /]")
					[/for]
			.withColumnRenamed("logEvents", "[role2.entity.name/]_logEvents"),
			[if (ref.sourceField->any(true).oclIsTypeOf(ArrayField) or ref.sourceField.ancestors(EmbeddedObject)->size() > 0 or (ref.sourceField->any(true).ancestors(KVComplexField)->size() > 0 and ref.sourceField->any(true).ancestors(KVComplexField)->any(true).type=KVDataType::LIST))]
			functions.array_contains([role.entity.name.toLowerFirst()/]TDO[ref.name/][role.name/].col("[getJavaAbsolutePath(ref).toLowerFirst() /]_[ref.sourceField->first().getPhysicalName()/]"),[role2.entity.name.toLowerFirst()/]TDO[ref.name/][role2.name/].col("[getJavaAbsolutePath(ref).toLowerFirst() /]_[ref.targetField->first().getPhysicalName()/]")));
			[else]
			[role.entity.name.toLowerFirst()/]TDO[ref.name/][role.name/].col("[getJavaAbsolutePath(ref).toLowerFirst() /]_[ref.sourceField->first().getPhysicalName()/]").equalTo([role2.entity.name.toLowerFirst()/]TDO[ref.name/][role2.name/].col("[getJavaAbsolutePath(ref).toLowerFirst().toLowerFirst() /]_[ref.targetField->first().getPhysicalName()/]")));
			[/if]

	Dataset<[rel.name.toUpperFirst()/]> res_[ref.name/] = res_[ref.name/]_temp.map(
		(MapFunction<Row, [rel.name.toUpperFirst()/]>) r -> {
			[rel.name.toUpperFirst()/] res = new [rel.name.toUpperFirst()/]();
			[role.entity.name.toUpperFirst()/] A = new [role.entity.name.toUpperFirst()/]();
			[role2.entity.name.toUpperFirst()/] B = new [role2.entity.name.toUpperFirst()/]();
			[for (attr : Attribute | role.entity.attributes)]
			A.set[attr.name.toUpperFirst()/](Util.get[generateJavaTypeMethodNameCompliant(attr.type) /]Value(r.getAs("[attr.name.toLowerFirst()/]")));
			[/for]
			A.setLogEvents((ArrayList<String>) ScalaUtil.javaList(r.getAs("logEvents")));

			[for (attr : Attribute | role2.entity.attributes)]
			B.set[attr.name.toUpperFirst()/](Util.get[generateJavaTypeMethodNameCompliant(attr.type) /]Value(r.getAs("[role2.entity.name/]_[attr.name.toLowerFirst()/]")));
			[/for]
			B.setLogEvents((ArrayList<String>) ScalaUtil.javaList(r.getAs("[role2.entity.name/]_logEvents")));
				
			res.set[role.name.toUpperFirst()/](A);
			res.set[role2.name.toUpperFirst()/](B);
			return res;
		},Encoders.bean([rel.name.toUpperFirst()/].class)
	);

				[/if]
	datasetsPOJO.add(res_[ref.name/]);
				[/let]
				[/let]
				[/let]
				[/let]
			[/if]
		[/for]

	[for (ref: Reference | getMappedReferences(role2, conceptualSchema.getMappingRules()))]
			[if (hasMappedReferenceInSamePhysicalStructureForOppoisteRole(role, ref.getAbstractPhysicalStructureNotEmbeddedObject()) = false)]
	[comment B -> A (based on reference role, this classification makes more sense in GetRoleList methods instead of GetR./]
	[comment optimization possible when the 2 physical structures to join are stored in the same database (ex: a SQL join is possible instead of a brute-force Spark join /]
				[let struct1 : AbstractPhysicalStructure = ref.getAbstractPhysicalStructureNotEmbeddedObject()]
				[let struct2 : AbstractPhysicalStructure = ref.targetField->first().getAbstractPhysicalStructureNotEmbeddedObject()]
				[let db1 : Database = struct1.getConcernedDatabases(struct1.ancestors(Domainmodel)->first())->any(true)]
				[let db2 : Database = struct2.getConcernedDatabases(struct2.ancestors(Domainmodel)->first())->any(true)]
	[role2.name/]_refilter = new MutableBoolean(false);
				[if (db1 = db2 and db1.dbType.isRelational())]
	// For role '[role2.name/]' in reference '[ref.name/]'  B->A Scenario in SQL Db.
	Dataset<[role.getRelationShipType().name.toUpperFirst()/]> res_[ref.name/] = [role.getRelationShipType().name.toLowerFirst()/]Service.get[role.getOppositeRoles()->any(true).name.toUpperFirst()/]And[role.name.toUpperFirst()/]ListIn[ref.name.toUpperFirst()/]In[struct1.name.toUpperFirst()/]From[db1.name.toUpperFirst()/]([role.getRelationShipType().roles->first().name/]_condition, [role.getRelationShipType().roles->first().getOppositeRoles()->any(true).name/]_condition, [role.getRelationShipType().roles->first().name/]_refilter, [role.getRelationShipType().roles->first().getOppositeRoles()->any(true).name/]_refilter);
	[else]
	[comment A & B not in same DB or involve NoSQL struct. So need of TDO objects /]
	// For role '[role2.name/]' in reference '[ref.name/]'  B->A Scenario
	Dataset<[role2.entity.name.toUpperFirst()/]TDO> [role2.entity.name.toLowerFirst()/]TDO[ref.name/][role2.name/] = [role.getRelationShipType().name.toLowerFirst()/]Service.get[role2.entity.name.toUpperFirst()/]TDOList[role2.name.toUpperFirst() /]In[ref.name.toUpperFirst()/]In[ref.getAbstractPhysicalStructureNotEmbeddedObject().name.toUpperFirst() /]From[ref.getPhysicalSchema().name.toUpperFirst()/]([role2.name/]_condition, [role2.name/]_refilter);
	Dataset<[role.entity.name.toUpperFirst()/]TDO> [role.entity.name.toLowerFirst()/]TDO[ref.name/][role.name /] = [role.getRelationShipType().name.toLowerFirst()/]Service.get[role.entity.name.toUpperFirst()/]TDOList[role.name.toUpperFirst() /]In[ref.name.toUpperFirst()/]In[ref.getAbstractPhysicalStructureNotEmbeddedObject().name.toUpperFirst() /]From[ref.getPhysicalSchema().name.toUpperFirst()/]([role.name/]_condition, [role.name/]_refilter);
	
			[if (ref.sourceField->any(true).oclIsTypeOf(ArrayField) or ref.sourceField.ancestors(EmbeddedObject)->size() > 0 or (ref.sourceField->any(true).ancestors(KVComplexField)->size()>0 and ref.sourceField->any(true).ancestors(KVComplexField)->any(true).type=KVDataType::LIST))]
	// Multi valued reference	
	Dataset<Row> res_[ref.name/]_temp = 
		[role2.entity.name.toLowerFirst()/]TDO[ref.name/][role2.name/]
		[for (attr : Attribute | role2.entity.attributes)]
		.withColumnRenamed("[attr.name.toLowerFirst() /]", "[role2.entity.name/]_[attr.name.toLowerFirst() /]")
		[/for]
		.withColumnRenamed("logEvents", "[role2.entity.name/]_logEvents")
		.join([role.entity.name.toLowerFirst()/]TDO[ref.name/][role.name /],
			functions.array_contains([role2.entity.name.toLowerFirst()/]TDO[ref.name/][role2.name/].col("[getJavaAbsolutePath(ref).toLowerFirst() /]_[ref.sourceField->first().getPhysicalName()/]"),[role.entity.name.toLowerFirst()/]TDO[ref.name/][role.name/].col("[getJavaAbsolutePath(ref).toLowerFirst() /]_[ref.targetField->first().getPhysicalName()/]")));
			[else]
	Dataset<Row> res_[ref.name/]_temp = 
		[role.entity.name.toLowerFirst()/]TDO[ref.name/][role.name /].join([role2.entity.name.toLowerFirst()/]TDO[ref.name/][role2.name/]
			[for (attr : Attribute | role2.entity.attributes)]
			.withColumnRenamed("[attr.name.toLowerFirst() /]", "[role2.entity.name/]_[attr.name.toLowerFirst() /]")
			[/for]
			.withColumnRenamed("logEvents", "[role2.entity.name/]_logEvents"),
			[role.entity.name.toLowerFirst()/]TDO[ref.name/][role.name/].col("[getJavaAbsolutePath(ref).toLowerFirst() /]_[ref.targetField->first().getPhysicalName()/]").equalTo([role2.entity.name.toLowerFirst()/]TDO[ref.name/][role2.name/].col("[getJavaAbsolutePath(ref).toLowerFirst() /]_[ref.sourceField->first().getPhysicalName()/]")));
			[/if]

	Dataset<[rel.name.toUpperFirst()/]> res_[ref.name/] = res_[ref.name/]_temp.map(
		(MapFunction<Row, [rel.name.toUpperFirst()/]>) r -> {
			[rel.name.toUpperFirst()/] res = new [rel.name.toUpperFirst()/]();
			[role.entity.name.toUpperFirst()/] A = new [role.entity.name.toUpperFirst()/]();
			[role2.entity.name.toUpperFirst()/] B = new [role2.entity.name.toUpperFirst()/]();
			[for (attr : Attribute | role.entity.attributes)]
			A.set[attr.name.toUpperFirst()/](Util.get[generateJavaTypeMethodNameCompliant(attr.type) /]Value(r.getAs("[attr.name.toLowerFirst()/]")));
			[/for]
			A.setLogEvents((ArrayList<String>) ScalaUtil.javaList(r.getAs("logEvents")));

			[for (attr : Attribute | role2.entity.attributes)]
			B.set[attr.name.toUpperFirst()/](Util.get[generateJavaTypeMethodNameCompliant(attr.type) /]Value(r.getAs("[role2.entity.name/]_[attr.name.toLowerFirst()/]")));
			[/for]
			B.setLogEvents((ArrayList<String>) ScalaUtil.javaList(r.getAs("[role2.entity.name/]_logEvents")));
				
			res.set[role.name.toUpperFirst()/](A);
			res.set[role2.name.toUpperFirst()/](B);
			return res;
		},Encoders.bean([rel.name.toUpperFirst()/].class)
	);

[/if]
			
	datasetsPOJO.add(res_[ref.name/]);
				[/let]
				[/let]
				[/let]
				[/let]
			[/if]
		[/for]
	
		[let rel : RelationshipType = role.getRelationShipType()]
	Dataset<[rel.name.toUpperFirst()/]> res_[rel.name/]_[role.name/];
	Dataset<[role.entity.name.toUpperFirst()/]> res_[role.entity.name/];
	[comment A(B) embedded B in A, getAbyB /]
		[for (embedded : EmbeddedObject | getMappedEmbeddedObjects(role, conceptualSchema.getMappingRules()))]
	// Role '[role.name/]' mapped to EmbeddedObject '[embedded.getPhysicalName()/]' - '[role2.entity.name/]' containing '[role.entity.name/]'
	[role2.name/]_refilter = new MutableBoolean(false);
	res_[rel.name/]_[role.name/] = [rel.name.toLowerFirst()/]Service.get[rel.name.toUpperFirst()/]ListIn[ getPhysicalFieldAbsolutePath(embedded) /]([role.name/]_condition, [role2.name/]_condition, [role.name/]_refilter, [role2.name/]_refilter);
 	
	datasetsPOJO.add(res_[rel.name/]_[role.name/]);
		[/for]
	[comment for method getContainedObject by role/]
	[comment B(A) embedded A in B, getAbyB /]
		[for (embedded : EmbeddedObject | getMappedEmbeddedObjects(role2, conceptualSchema.getMappingRules()))]
	// Role '[role2.name/]' mapped to EmbeddedObject '[embedded.getPhysicalName()/]' '[role.entity.name/]' containing '[role2.entity.name/]' 
	[role2.name/]_refilter = new MutableBoolean(false);
	res_[rel.name/]_[role.name/] = [rel.name.toLowerFirst()/]Service.get[rel.name.toUpperFirst()/]ListIn[ getPhysicalFieldAbsolutePath(embedded) /]([role2.name/]_condition, [role.name/]_condition, [role2.name/]_refilter, [role.name/]_refilter);
	
	datasetsPOJO.add(res_[rel.name/]_[role.name/]);
		[/for]
		[/let]
	
	
	//Join datasets or return 
	Dataset<[rel.name.toUpperFirst()/]> res = fullOuterJoins[rel.name.toUpperFirst()/](datasetsPOJO);
	if(res == null)
		return null;

	Dataset<[role.entity.name.toUpperFirst()/]> lonely[role.name.toUpperFirst()/] = null;
	Dataset<[role2.entity.name.toUpperFirst()/]> lonely[role2.name.toUpperFirst()/] = null;
	
	[for (r : Role | Sequence{role, role2})]
	[comment  If A is in another structure not involved in A-r-B , it may contain other attributes of A.
		We therefore get those A objects, and we left join them with the to return A dataset. (So we retrieve the complete A attributes)/]
		[let structures : Set(AbstractPhysicalStructure) = getMappedStructuresNotConcernedByRelationshipType(r.entity, r.getRelationShipType(), conceptualSchema.getMappingRules())]
		[if (structures->size() > 0)]
	List<Dataset<[r.entity.name.toUpperFirst()/]>> lonely[r.name/]List = new ArrayList<Dataset<[r.entity.name.toUpperFirst()/]>>();
			[for (struct : AbstractPhysicalStructure | structures)]
	lonely[r.name/]List.add([r.entity.name.toLowerFirst()/]Service.get[r.entity.name.toUpperFirst()/]ListIn[struct.name.toUpperFirst()/]From[getConcernedDatabases(struct, struct.ancestors(Domainmodel)->first())->any(true).name.toUpperFirst()/]([r.name/]_condition, new MutableBoolean(false)));
			[/for]
	[comment  If A1 'standalone' and A2 standalone. We need to fullouter them./]
	lonely[r.name.toUpperFirst()/] = [r.entity.name.toUpperFirst()/]Service.fullOuterJoins[r.entity.name.toUpperFirst()/](lonely[r.name/]List);
	if(lonely[r.name.toUpperFirst()/] != null) {
		[comment  We left join A & the result of full outer of A1 & A2/]
		res = fullLeftOuterJoinBetween[rel.name.toUpperFirst()/]And[r.name.toUpperFirst()/](res, lonely[r.name.toUpperFirst()/]);
	}	
		[/if]
		[/let]

	[/for]
	
	if([role.name/]_refilter.booleanValue() || [role2.name/]_refilter.booleanValue()[if(role.getRelationShipType().attributes->size() > 0)] || [role.getRelationShipType().name/]_refilter.booleanValue()[/if])
		res = res.filter((FilterFunction<[rel.name.toUpperFirst() /]>) r -> ([role.name/]_condition == null || [role.name/]_condition.evaluate(r.get[role.name.toUpperFirst()/]())) && ([role2.name/]_condition == null || [role2.name/]_condition.evaluate(r.get[role2.name.toUpperFirst()/]()))[if(role.getRelationShipType().attributes->size()>0)] && ([role.getRelationShipType().name/]_condition == null || [role.getRelationShipType().name/]_condition.evaluate(r))[/if]);
	

	return res;

	[/let]
	[/let]
	[/if]
}[/template]

[template private generateCodeForJoinPhysicalStructure(role : Role, ref: Reference, role2 : Role, ref2: Reference)]
[let table : AbstractPhysicalStructure = ref.targetField->first().getAbstractPhysicalStructureNotEmbeddedObject() ]
[let table2 : AbstractPhysicalStructure = ref2.targetField->first().getAbstractPhysicalStructureNotEmbeddedObject() ]
[let jointable : AbstractPhysicalStructure = ref2.getAbstractPhysicalStructureNotEmbeddedObject() ]
[let db1 : Database = table.getConcernedDatabases(ref.ancestors(Domainmodel)->any(true))->any(true)]
[let db2 : Database = table2.getConcernedDatabases(ref.ancestors(Domainmodel)->any(true))->any(true)]
[let joindb : Database = jointable.getConcernedDatabases(ref.ancestors(Domainmodel)->any(true))->any(true)]
[if (db1 = db2 and db2 = joindb and db1.dbType.isRelational() )]
//join between 3 SQL tables stored in same db
// (A AB B)
[role2.name/]_refilter = new MutableBoolean(false);
Dataset<[role.getRelationShipType().name.toUpperFirst()/]> res_[entity.name/]_[ref.name/]_[ref2.name/] = [role.getRelationShipType().name.toLowerFirst()/]Service.get[role.getRelationShipType().name.toUpperFirst()/]ListIn[table.name/]And[jointable.name/]And[table2.name/]From[db1.name/]([role.name/]_condition, [role2.name/]_condition[if(role.getRelationShipType().attributes->size() > 0)], [role.getRelationShipType().name/]_condition[/if], [role.name/]_refilter, [role2.name/]_refilter[if(role.getRelationShipType().attributes->size() > 0)], [role.getRelationShipType().name/]_refilter[/if]);
datasetsPOJO.add(res_[entity.name/]_[ref.name/]_[ref2.name/]);	
[elseif (db1 = joindb and db1.dbType.isRelational())]
//join between 2 SQL tables and a non-relational structure
// (A - AB) (B)
[role2.name/]_refilter = new MutableBoolean(false);
Dataset<[role.getRelationShipType().name.toUpperFirst()/]TDO> res_[role.getRelationShipType().name/]_[ref.name/]_[ref2.name/] = [role.getRelationShipType().name.toLowerFirst()/]Service.get[role.getRelationShipType().name.toUpperFirst()/]TDOListIn[table.name/]And[jointable.name/]From[db1.name/]([role.name/]_condition[if(role.getRelationShipType().attributes->size()>0)], [role.getRelationShipType().name/]_condition[/if], [role.name/]_refilter[if(role.getRelationShipType().attributes->size()>0)], [role.getRelationShipType().name/]_refilter[/if]);
Dataset<[role2.entity.name.toUpperFirst()/]TDO> res_[ref2.name/]_[ref.name/] = [role.getRelationShipType().name.toLowerFirst()/]Service.get[role2.entity.name.toUpperFirst()/]TDOList[role2.name.toUpperFirst()/]In[ref2.name.toUpperFirst()/]In[table2.name.toUpperFirst()/]From[table2.getPhysicalSchema().name.toUpperFirst()/]([role2.name/]_condition, [role2.name/]_refilter);
Dataset<Row> B_res_[ref2.name/]_[ref.name/] = res_[ref2.name/]_[ref.name/]
[for (attr : Attribute | role2.entity.attributes)]
	.withColumnRenamed("[attr.name.toLowerFirst()/]", "B_[attr.name.toLowerFirst()/]")
[/for]
	.withColumnRenamed("logEvents", "B_logEvents");


Dataset<Row> res_row_[ref.name/]_[ref2.name/] = res_[role.getRelationShipType().name/]_[ref.name/]_[ref2.name/].join(B_res_[ref2.name/]_[ref.name/],
													res_[role.getRelationShipType().name/]_[ref.name/]_[ref2.name/].col("[getJavaAbsolutePath(ref2).toLowerFirst() /]_[ref2.sourceField->first().getPhysicalName()/]").equalTo(B_res_[ref2.name/]_[ref.name/].col("[getJavaAbsolutePath(ref2).toLowerFirst() /]_[ref2.targetField->first().getPhysicalName()/]")));

Dataset<[role.getRelationShipType().name.toUpperFirst()/]> res_[entity.name/]_[ref.name/] = res_row_[ref.name/]_[ref2.name/].map((MapFunction<Row, [role.getRelationShipType().name.toUpperFirst()/]>) r -> {
			[role.getRelationShipType().name.toUpperFirst()/] res = new [role.getRelationShipType().name.toUpperFirst()/]();
			
			[role.entity.name.toUpperFirst() /] A = new [role.entity.name.toUpperFirst() /]();
			[role2.entity.name.toUpperFirst() /] B = new [role2.entity.name.toUpperFirst() /]();
				
			Object o = r.getAs("[role.name.toLowerFirst()/]");
			if(o != null) {
				if(o instanceof Row) {
					Row r2 = (Row) o;
					[for (attr : Attribute | role.entity.attributes)]
					A.set[attr.name.toUpperFirst()/](Util.get[generateJavaTypeMethodNameCompliant(attr.type) /]Value(r2.getAs("[attr.name.toLowerFirst()/]")));
					[/for]
					A.setLogEvents((ArrayList<String>) ScalaUtil.javaList(r2.getAs("logEvents")));
				}
				if(o instanceof [role.entity.name.toUpperFirst()/])
					A = ([role.entity.name.toUpperFirst()/]) o;
			}


			[for (attr : Attribute | role.getRelationShipType().attributes)]
			res.set[attr.name.toUpperFirst()/](Util.get[generateJavaTypeMethodNameCompliant(attr.type) /]Value(r.getAs("[attr.name.toLowerFirst()/]")));
			[/for]
			res.setLogEvents((ArrayList<String>) ScalaUtil.javaList(r.getAs("logEvents")));

			[for (attr : Attribute | role2.entity.attributes)]
			B.set[attr.name.toUpperFirst()/](Util.get[generateJavaTypeMethodNameCompliant(attr.type) /]Value(r.getAs("B_[attr.name.toLowerFirst()/]")));
			[/for]
			B.setLogEvents((ArrayList<String>) ScalaUtil.javaList(r.getAs("B_logEvents")));
				
			res.set[role.name.toUpperFirst()/](A);
			res.set[role2.name.toUpperFirst()/](B);
			return res;
		}, Encoders.bean([role.getRelationShipType().name.toUpperFirst()/].class));

datasetsPOJO.add(res_[entity.name/]_[ref.name/]);


[elseif (db2 = joindb and db2.dbType.isRelational())]
//join between 2 SQL tables and a non-relational structure
// (A) (AB - B)
[role2.name/]_refilter = new MutableBoolean(false);
Dataset<[role2.getRelationShipType().name.toUpperFirst()/]TDO> res_[role2.getRelationShipType().name/]_[ref2.name/]_[ref.name/] = [role2.getRelationShipType().name.toLowerFirst()/]Service.get[role2.getRelationShipType().name.toUpperFirst()/]TDOListIn[table2.name/]And[jointable.name/]From[db2.name/]([role2.name/]_condition[if(role.getRelationShipType().attributes->size()>0)], [role.getRelationShipType().name/]_condition[/if], [role2.name/]_refilter[if(role.getRelationShipType().attributes->size()>0)], [role.getRelationShipType().name/]_refilter[/if]);
Dataset<[role.entity.name.toUpperFirst()/]TDO> res_[ref.name/]_[ref2.name/] = [role.getRelationShipType().name.toLowerFirst()/]Service.get[role.entity.name.toUpperFirst()/]TDOList[role.name.toUpperFirst()/]In[ref.name.toUpperFirst()/]In[table.name.toUpperFirst()/]From[table.getPhysicalSchema().name.toUpperFirst()/]([role.name/]_condition, [role.name/]_refilter);
Dataset<Row> B_res_[ref.name/]_[ref2.name/] = res_[ref.name/]_[ref2.name/]
[for (attr : Attribute | role.entity.attributes)]
	.withColumnRenamed("[attr.name.toLowerFirst()/]", "B_[attr.name.toLowerFirst()/]")
[/for]
	.withColumnRenamed("logEvents", "B_logEvents");

Dataset<Row> res_row_[ref2.name/]_[ref.name/] = res_[role2.getRelationShipType().name/]_[ref2.name/]_[ref.name/].join(B_res_[ref.name/]_[ref2.name/],
	res_[role2.getRelationShipType().name/]_[ref2.name/]_[ref.name/].col("[getJavaAbsolutePath(ref).toLowerFirst() /]_[ref.sourceField->first().getPhysicalName()/]").equalTo(B_res_[ref.name/]_[ref2.name/].col("[getJavaAbsolutePath(ref).toLowerFirst() /]_[ref.targetField->first().getPhysicalName()/]")));
Dataset<[role.getRelationShipType().name.toUpperFirst()/]> res_[entity.name/]_[ref.name/] = res_row_[ref2.name/]_[ref.name/].map((MapFunction<Row, [role.getRelationShipType().name.toUpperFirst()/]>) r -> {
			[role.getRelationShipType().name.toUpperFirst()/] res = new [role.getRelationShipType().name.toUpperFirst()/]();
			
			[role.entity.name.toUpperFirst() /] B = new [role.entity.name.toUpperFirst() /]();
			[role2.entity.name.toUpperFirst() /] A = new [role2.entity.name.toUpperFirst() /]();
				
			Object o = r.getAs("[role2.name.toLowerFirst()/]");
			if(o != null) {
				if(o instanceof Row) {
					Row r2 = (Row) o;
					[for (attr : Attribute | role2.entity.attributes)]
					A.set[attr.name.toUpperFirst()/](Util.get[generateJavaTypeMethodNameCompliant(attr.type) /]Value(r2.getAs("[attr.name.toLowerFirst()/]")));
					[/for]
					A.setLogEvents((ArrayList<String>) ScalaUtil.javaList(r2.getAs("logEvents")));
				}
				if(o instanceof [role2.entity.name.toUpperFirst()/])
					A = ([role2.entity.name.toUpperFirst()/]) o;
			}


			[for (attr : Attribute | role.getRelationShipType().attributes)]
			res.set[attr.name.toUpperFirst()/](Util.get[generateJavaTypeMethodNameCompliant(attr.type) /]Value(r.getAs("[attr.name.toLowerFirst()/]")));
			[/for]
			res.setLogEvents((ArrayList<String>) ScalaUtil.javaList(r.getAs("logEvents")));

			[for (attr : Attribute | role.entity.attributes)]
			B.set[attr.name.toUpperFirst()/](Util.get[generateJavaTypeMethodNameCompliant(attr.type) /]Value(r.getAs("B_[attr.name.toLowerFirst()/]")));
			[/for]
			B.setLogEvents((ArrayList<String>) ScalaUtil.javaList(r.getAs("B_logEvents")));
				
			res.set[role2.name.toUpperFirst()/](A);
			res.set[role.name.toUpperFirst()/](B);
			return res;
		}, Encoders.bean([role.getRelationShipType().name.toUpperFirst()/].class));

datasetsPOJO.add(res_[entity.name/]_[ref.name/]);
[else]
// (A) (AB) (B)  OR (A B) (AB) Join table is 'alone' 
[role2.name/]_refilter = new MutableBoolean(false);
Dataset<[role.entity.name.toUpperFirst()/]TDO> [role.entity.name.toLowerFirst()/]TDO[ref.name/][role.name/] = this.get[role.entity.name.toUpperFirst()/]TDOList[role.name.toUpperFirst() /]In[ref.name.toUpperFirst()/]In[ref.targetField->first().getAbstractPhysicalStructureNotEmbeddedObject().name.toUpperFirst() /]From[ref.targetField->first().getPhysicalSchema().name.toUpperFirst()/]([role.name/]_condition, [role.name/]_refilter);
Dataset<[role.getRelationShipType().name.toUpperFirst()/]TDO> [role.getRelationShipType().name.toLowerFirst()/]TDO[ref.name/]_[ref2.name/] = this.get[role.getRelationShipType().name.toUpperFirst()/]TDOListIn[role.ancestors(RelationshipType)->any(true).name.toUpperFirst()/]_[ref.name.toUpperFirst()/]_[ref2.name.toUpperFirst()/]In[ref.getAbstractPhysicalStructureNotEmbeddedObject().name.toUpperFirst() /]From[ref.getPhysicalSchema().name.toUpperFirst()/]([if (role.getRelationShipType().attributes->size() > 0)][role.getRelationShipType().name/]_condition, [role.getRelationShipType().name/]_refilter[/if]);
Dataset<[role2.entity.name.toUpperFirst()/]TDO> [role2.entity.name.toLowerFirst()/]TDO[ref.name/][role2.name/] = this.get[role2.entity.name.toUpperFirst()/]TDOList[role2.name.toUpperFirst() /]In[ref2.name.toUpperFirst()/]In[ref2.targetField->first().getAbstractPhysicalStructureNotEmbeddedObject().name.toUpperFirst() /]From[ref2.targetField->first().getPhysicalSchema().name.toUpperFirst()/]([role2.name/]_condition, [role2.name/]_refilter);

Dataset<Row> A_[role.entity.name.toLowerFirst()/]TDO[ref.name/][role.name/]  = [role.entity.name.toLowerFirst()/]TDO[ref.name/][role.name/]
[for (attr : Attribute | role.entity.attributes)]
	.withColumnRenamed("[attr.name.toLowerFirst()/]", "A_[attr.name.toLowerFirst()/]")
[/for]
	.withColumnRenamed("logEvents", "A_logEvents");

Dataset<Row> C_[role2.entity.name.toLowerFirst()/]TDO[ref.name/][role2.name/] = [role2.entity.name.toLowerFirst()/]TDO[ref.name/][role2.name/]
[for (attr : Attribute | role2.entity.attributes)]
	.withColumnRenamed("[attr.name.toLowerFirst()/]", "C_[attr.name.toLowerFirst()/]")
[/for]
	.withColumnRenamed("logEvents", "C_logEvents");

Dataset<Row> res_[ref.name/] = A_[entity.name.toLowerFirst()/]TDO[ref.name/][role.name/].join([role.getRelationShipType().name.toLowerFirst()/]TDO[ref.name/]_[ref2.name/],
								A_[entity.name.toLowerFirst()/]TDO[ref.name/][role.name/].col("[getJavaAbsolutePath(ref).toLowerFirst() /]_[ref.targetField->first().getPhysicalName()/]").equalTo([role.getRelationShipType().name.toLowerFirst()/]TDO[ref.name/]_[ref2.name/].col("[getJavaAbsolutePath(ref).toLowerFirst() /]_[ref.sourceField->first().getPhysicalName()/]")));
res_[ref.name/] = res_[ref.name/].join(C_[role2.entity.name.toLowerFirst()/]TDO[ref.name/][role2.name/],
	res_[ref.name/].col("[getJavaAbsolutePath(ref2).toLowerFirst() /]_[ref2.sourceField->first().getPhysicalName()/]").equalTo(C_[role2.entity.name.toLowerFirst()/]TDO[ref.name/][role2.name/].col("[getJavaAbsolutePath(ref2).toLowerFirst() /]_[ref2.targetField->first().getPhysicalName()/]")));

Dataset<[role.getRelationShipType().name.toUpperFirst()/]> res_[entity.name/]_[ref.name/] = res_[ref.name/].map((MapFunction<Row, [role.getRelationShipType().name.toUpperFirst()/]>) r -> {
			[role.getRelationShipType().name.toUpperFirst()/] res = new [role.getRelationShipType().name.toUpperFirst()/]();
			[role.entity.name.toUpperFirst() /] A = new [role.entity.name.toUpperFirst() /]();
			[role2.entity.name.toUpperFirst() /] C = new [role2.entity.name.toUpperFirst() /]();
			[for (attr : Attribute | role.entity.attributes)]
			A.set[attr.name.toUpperFirst()/](Util.get[generateJavaTypeMethodNameCompliant(attr.type) /]Value(r.getAs("A_[attr.name.toLowerFirst()/]")));
			[/for]
			A.setLogEvents((ArrayList<String>) ScalaUtil.javaList(r.getAs("A_logEvents")));

			[for (attr : Attribute | role.getRelationShipType().attributes)]
			res.set[attr.name.toUpperFirst()/](Util.get[generateJavaTypeMethodNameCompliant(attr.type) /]Value(r.getAs("[attr.name.toLowerFirst()/]")));
			[/for]
			res.setLogEvents((ArrayList<String>) ScalaUtil.javaList(r.getAs("logEvents")));				

			[for (attr : Attribute | role2.entity.attributes)]
			C.set[attr.name.toUpperFirst()/](Util.get[generateJavaTypeMethodNameCompliant(attr.type) /]Value(r.getAs("C_[attr.name.toLowerFirst()/]")));
			[/for]
			C.setLogEvents((ArrayList<String>) ScalaUtil.javaList(r.getAs("C_logEvents")));
				
			res.set[role.name.toUpperFirst()/](A);
			res.set[role2.name.toUpperFirst()/](C);
			return res;
		}, Encoders.bean([role.getRelationShipType().name.toUpperFirst()/].class));

datasetsPOJO.add(res_[entity.name/]_[ref.name/]);	
[/if]
[/let]
[/let]	
[/let]	
[/let]
[/let]
[/let]
[/template]
