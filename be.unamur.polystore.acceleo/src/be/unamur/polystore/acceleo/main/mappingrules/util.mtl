[comment encoding = Cp1252 /]
[module util('http://www.unamur.be/polystore/Pml')/]
[import be::unamur::polystore::acceleo::main::util /]

[query public getMappedPhysicalFields(arg0 : Attribute, arg1 : MappingRules) : Collection(PhysicalField)
	= invoke('be.unamur.polystore.acceleo.main.utils.MappingRuleService', 'getMappedPhysicalFields(be.unamur.polystore.pml.Attribute, be.unamur.polystore.pml.MappingRules)', Sequence{arg0, arg1})
/]

[query public getConcernedDatabases(ent : EntityType, model: Domainmodel) : Set(Database) 
= invoke('be.unamur.polystore.acceleo.main.utils.MappingRuleService', 'getConcernedDatabases(be.unamur.polystore.pml.EntityType, be.unamur.polystore.pml.Domainmodel)', Sequence{ent, model}) /]

[query public getConcernedDatabases(attr : Attribute, model: Domainmodel) : Set(Database) 
= invoke('be.unamur.polystore.acceleo.main.utils.MappingRuleService', 'getConcernedDatabases(be.unamur.polystore.pml.Attribute, be.unamur.polystore.pml.Domainmodel)', Sequence{attr, model}) /]


[query public getConcernedPhysicalStructures(ent : EntityType, model: Domainmodel) : Set(AbstractPhysicalStructure) 
= invoke('be.unamur.polystore.acceleo.main.utils.MappingRuleService', 'getConcernedPhysicalStructures(be.unamur.polystore.pml.EntityType, be.unamur.polystore.pml.Domainmodel)', Sequence{ent, model}) /]

[query public getConcernedDatabases(struct : AbstractPhysicalStructure, model: Domainmodel) : Set(Database) 
= invoke('be.unamur.polystore.acceleo.main.utils.MappingRuleService', 'getConcernedDatabases(be.unamur.polystore.pml.AbstractPhysicalStructure, be.unamur.polystore.pml.Domainmodel)', Sequence{struct, model}) /]

[query public getMappedPhysicalField(attr : Attribute, struct: AbstractPhysicalStructure, db: Database, rules: MappingRules) : PhysicalField 
= invoke('be.unamur.polystore.acceleo.main.utils.MappingRuleService', 'getMappedPhysicalField(be.unamur.polystore.pml.Attribute, be.unamur.polystore.pml.AbstractPhysicalStructure, be.unamur.polystore.pml.Database, be.unamur.polystore.pml.MappingRules)', Sequence{attr, struct, db, rules}) /]

[query public getPhysicalName(field : PhysicalField): String
= invoke('be.unamur.polystore.acceleo.main.utils.MappingRuleService', 'getPhysicalName(be.unamur.polystore.pml.PhysicalField)', Sequence{field}) /]


[query public getPreparedValue(attr: Attribute, field: PhysicalField, parent : LongField, escapeSQLReservedChar :  Boolean, escapeMongoReservedChar :  Boolean): String
= invoke('be.unamur.polystore.acceleo.main.utils.MappingRuleService', 'getPreparedValue(be.unamur.polystore.pml.Attribute, be.unamur.polystore.pml.PhysicalField, be.unamur.polystore.pml.LongField, boolean, boolean)', Sequence{attr, field, parent, escapeSQLReservedChar, escapeMongoReservedChar}) /]

[query public getPatternValue(): String
= invoke('be.unamur.polystore.acceleo.main.utils.MappingRuleService', 'getPatternValue()', Sequence{}) /]

[query public getPatternOtherValue(): String
= invoke('be.unamur.polystore.acceleo.main.utils.MappingRuleService', 'getPatternOtherValue()', Sequence{}) /]

[query public getMappedReferences(role: Role, rules: MappingRules ): Set(Reference) 
= invoke('be.unamur.polystore.acceleo.main.utils.MappingRuleService', 'getMappedReferences(be.unamur.polystore.pml.Role, be.unamur.polystore.pml.MappingRules)', Sequence{role, rules}) /]

[query public getMappingRules(o: OclAny) : MappingRules = 
	o.ancestors(Domainmodel)->first().mappingRules /]

[query public isHostedInJoinPhysicalStructureServing(role : Role, struct: AbstractPhysicalStructure) : Boolean = 
	hasMappedReferenceInSamePhysicalStructureForOppoisteRole(role, struct) /]

[query public hasMappedReferenceInSamePhysicalStructureForOppoisteRole(role : Role, struct: AbstractPhysicalStructure) : Boolean = 
	getMappedReferences(role, role.getMappingRules()) -> select(ref : Reference | ref.getAbstractPhysicalStructureNotEmbeddedObject() = struct) -> size() > 0 /]

[query public getMappedReferenceInSamePhysicalStructureForOppositeRole(role : Role, struct: AbstractPhysicalStructure) : Reference = 
	getMappedReferences(role, role.getMappingRules()) -> select(ref : Reference | ref.getAbstractPhysicalStructureNotEmbeddedObject() = struct) -> any(true) /]

[query public getMappedEmbeddedObjects(role: Role, rules: MappingRules ) : Set(EmbeddedObject) 
	= invoke('be.unamur.polystore.acceleo.main.utils.MappingRuleService', 'getMappedEmbeddedObjects(be.unamur.polystore.pml.Role, be.unamur.polystore.pml.MappingRules)', Sequence{role, rules}) /]


