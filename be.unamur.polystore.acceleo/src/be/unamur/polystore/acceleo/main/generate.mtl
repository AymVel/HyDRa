[comment encoding = UTF-8 /]
[module generate('http://www.unamur.be/polystore/Pml')]
[import be::unamur::polystore::acceleo::main::generateGenericClasses /]
[import be::unamur::polystore::acceleo::main::generateEntityTypeRelatedClasses /]
[import be::unamur::polystore::acceleo::main::generateRelationshipTypeClass /]
[import be::unamur::polystore::acceleo::main::services::generateEntityTypeServices /]
[import be::unamur::polystore::acceleo::main::services::generateRelationshipTypeServices /]
[import be::unamur::polystore::acceleo::main::dbconnections::generateDBConnectionClasses /]

[import be::unamur::polystore::acceleo::main::generatePomFile /]

[import be::unamur::polystore::acceleo::main::mappingrules::util]

[template public generateElement(conceptualSchema : ConceptualSchema)]
[comment @main/]

[comment][disableParsingMode() /][/comment]

[generateGenericClasses(conceptualSchema) /]
[generateDBConnectionClasses(conceptualSchema) /]
[generateIPojo() /]
[generateLoggingPojo() /]
[for (entityType: EntityType | conceptualSchema.entities)]
	[generateEntityTypePojoClass(entityType, conceptualSchema) /]
	[generateEntityTypeTechnicalDataObjectsClass(entityType, conceptualSchema) /]
	[generateAllLevelsEntityTypeClass(entityType, conceptualSchema) /]
[/for]

[for (rel: RelationshipType | conceptualSchema.relationships)]
	[ generateRelationshipTypePojoClass(rel, conceptualSchema)/]
	[ generateAllLevelsRelationshipTypeClass(rel, conceptualSchema) /]
[/for]
[/template]

[template private generateIPojo()]
[file ('src/main/java/pojo/IPojo.java', false, 'UTF-8')]
package pojo;

public interface IPojo {}
[/file]
[/template]

[template private generateLoggingPojo()]
[file ('src/main/java/pojo/LoggingPojo.java', false, 'UTF-8')]
package pojo;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

public abstract class LoggingPojo implements Serializable, Cloneable, IPojo {
	protected List<String> logEvents = new ArrayList<String>();

	public List<String> getLogEvents() {
		return this.logEvents;
	}

	public void setLogEvents(List<String> logEvents) {
		this.logEvents = logEvents;
	}

	public void addLogEvent(String logEvent) {
		this.logEvents.add(logEvent);
	}
}
[/file]
[/template]
