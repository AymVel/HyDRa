[comment encoding = UTF-8 /]
[module generateRelationshipTypeClass('http://www.unamur.be/polystore/Pml')]
[import be::unamur::polystore::acceleo::main::util /]
[import be::unamur::polystore::acceleo::main::services::generateRelationshipTypeServices /]
[import be::unamur::polystore::acceleo::main::impl::generateRelationshipTypeServicesImpl /]
[import be::unamur::polystore::acceleo::main::mappingrules::util /]
[query public isRelationshipTypeComplex(rel : RelationshipType) : Boolean = rel.attributes->size() > 0 or rel.roles->size() > 2 /]

[template public generateAllLevelsRelationshipTypeClass(rel: RelationshipType, conceptualSchema: ConceptualSchema)]
[generateRelationshipTypeServices(rel, conceptualSchema) /]
[generateRelationshipTypeServicesImpl(rel, conceptualSchema) /]
[/template]

[template public generateRelationshipTypePojoClass(rel : RelationshipType, conceptualSchema: ConceptualSchema)]
[if (true or isRelationshipTypeComplex(rel))]
[file ('src/main/java/pojo/' + rel.name.toUpperFirst().concat('.java'), false, 'UTF-8')]
package pojo;

import java.time.LocalDate;
import java.time.LocalDateTime;

public class [rel.name.toUpperFirst() /] extends LoggingPojo {

[for (role: Role | rel.roles)]
	private [role.entity.name.toUpperFirst()/] [role.name/];	
[/for]
[for (attr: Attribute | rel.attributes)]
	private [generateJavaType(attr.type)/] [attr.name/];	
[/for]

	//Empty constructor
	public [rel.name.toUpperFirst() /]() {}
	
	//Role constructor
	public [rel.name.toUpperFirst() /]([for (role: Role | rel.roles) separator(',')][role.entity.name.toUpperFirst()/] [role.name/][/for]){
		[for (role: Role | rel.roles)]
		this.[role.name/]=[role.name/];
		[/for]
	}
	

	@Override
    public Object clone() throws CloneNotSupportedException {
        [rel.name.toUpperFirst() /] cloned = ([rel.name.toUpperFirst() /]) super.clone();
		[for (role: Role | rel.roles)]
		cloned.set[role.name.toUpperFirst()/](([role.entity.name.toUpperFirst()/])cloned.get[role.name.toUpperFirst()/]().clone());	
		[/for]
		return cloned;
    }

@Override
	public String toString(){
		return "[rel.name/] : "+
				"roles : {" + [for (role: Role | rel.roles) separator ('+"},"+ \n\t\t\t\t\t')] "[role.name/]:[role.entity.name.toUpperFirst()/]={"+[role.name/][/for]+"}"+
				 "}"+
			[if (rel.attributes->size()>0)]
			" attributes : { " + [for (attr: Attribute | rel.attributes) separator ('+", "+\n\t\t\t\t\t')]"[attr.name/]="+[attr.name/] [/for]+"}"; 
			[else]
				"";
			[/if]
	}
[for (role: Role | rel.roles)]
	public [role.entity.name.toUpperFirst()/] get[role.name.toUpperFirst()/]() {
		return [role.name/];
	}	

	public void set[role.name.toUpperFirst()/]([role.entity.name.toUpperFirst()/] [role.name/]) {
		this.[role.name/] = [role.name/];
	}
	
[/for]
[for (attr: Attribute | rel.attributes)]
	public [generateJavaType(attr.type)/] get[attr.name.toUpperFirst()/]() {
		return [attr.name/];
	}

	public void set[attr.name.toUpperFirst()/]([generateJavaType(attr.type)/] [attr.name/]) {
		this.[attr.name/] = [attr.name/];
	}
	
[/for]

}
[/file]	
[/if]
[/template]

[template public generateRelationshipTypeTechnicalDataObjectsClass(rel : RelationshipType, conceptualSchema: ConceptualSchema)]
[file ('src/main/java/tdo/' + rel.name.toUpperFirst().concat('TDO.java'), false, 'UTF-8')]
	package tdo;

	import pojo.[rel.name.toUpperFirst() /];
	
	public class [rel.name.toUpperFirst() /]TDO extends [rel.name.toUpperFirst() /] {
	
	[for (role : Role | rel.roles)]
		[for (ref: Reference | getMappedReferences(role, conceptualSchema.getMappingRules()))]
			[for (field : PhysicalField | ref.sourceField)]
	private String [getJavaAbsolutePath(ref, field).toLowerFirst() /];
	public String get[getJavaAbsolutePath(ref, field).toUpperFirst() /]() {
		return this.[getJavaAbsolutePath(ref, field).toLowerFirst() /];
	}

	public void set[getJavaAbsolutePath(ref, field).toUpperFirst() /]( String [getJavaAbsolutePath(ref, field) /]) {
		this.[getJavaAbsolutePath(ref, field).toLowerFirst() /] = [getJavaAbsolutePath(ref, field) /];
	}

			[/for]
			[for (field : PhysicalField | ref.targetField)]
	private String [getJavaAbsolutePath(ref, field).toLowerFirst() /];
	public String get[getJavaAbsolutePath(ref, field).toUpperFirst() /]() {
		return this.[getJavaAbsolutePath(ref, field).toLowerFirst() /];
	}

	public void set[getJavaAbsolutePath(ref, field).toUpperFirst() /]( String [getJavaAbsolutePath(ref, field) /]) {
		this.[getJavaAbsolutePath(ref, field).toLowerFirst() /] = [getJavaAbsolutePath(ref, field) /];
	}

			[/for]
		[/for]
	[/for]
	
	}
[/file]	
[/template]
