[comment encoding = UTF-8 /]
[module generateSimpleSelectMethodsImpl('http://www.unamur.be/polystore/Pml')]
[import be::unamur::polystore::acceleo::main::mappingrules::util /]

[comment get{E}List({E)AttributeCondition /]

[template public generateSimpleSelectMethodsImpl(entityType: EntityType, conceptualSchema: ConceptualSchema)]{
	//TODO
	return null;
}[/template]


[comment List<Customer> getCustomerListInCustomerFromMyMariabDB(Condition) /]

[template public generateSimpleSelectFromGivenDatabase(ent : EntityType, struct: AbstractPhysicalStructure, db : Database)]{
[if (db.dbType = pml::DatabaseType::MARIADB or db.dbType = pml::DatabaseType::SQLITE)]
[generateSimpleSQLSelectFromGivenDatabase(ent, struct, db) /]
[/if]	
	return null;
}[/template]

[template public generateSimpleSQLSelectFromGivenDatabase(ent : EntityType, struct: AbstractPhysicalStructure, db : Database)]
[comment  select * from Client where (...) /]
	String sql = "select * from [struct.name/]";
	if(condition != null) {
		String where = null;
		if(condition instanceof SimpleCondition) {
			[ent.name /]Attribute attr = ((SimpleCondition<[ent.name /]Attribute>) condition).getAttribute();
			Operator op = ((SimpleCondition<[ent.name /]Attribute>) condition).getOperator();
			Object value = ((SimpleCondition<[ent.name /]Attribute>) condition).getValue();
			[for (attr : Attribute | ent.attributes)]
			[let field : PhysicalField = getMappedPhysicalField(attr, db, ent.ancestors(Domainmodel)->first().mappingRules)]
			if(attr == [ent.name.toUpperFirst() /]Attribute.[attr.name /] ) {
				[field.oclIsKindOf(LongField) /]
				[field.oclIsTypeOf(LongField) /]
				[field.oclIsTypeOf(TerminalExpression)/]
				[field.ancestors()->first()/]
				[if (field.ancestors(LongField) -> size() = 0)]
				Object preparedValue = value;
				[else]
				Object preparedValue = [getSQLPreparedValue(attr, field.ancestors(LongField) -> first().oclAsType(LongField)) /];
				preparedValue = preparedValue.replaceAll([getSQLPatternValue() /], value);	
				[/if]
				
				where = "where [getPhysicalName(field)/] " + op.getSQLOperator() + " ?";
			}
			[/let]
			
			
			[/for]
		}

		if(condition instanceof AndCondition) {

		}

		if(condition instanceof OrCondition) {

		}

		if(where != null)
			sql += " " + where + ";";
		
	}
[/template]

