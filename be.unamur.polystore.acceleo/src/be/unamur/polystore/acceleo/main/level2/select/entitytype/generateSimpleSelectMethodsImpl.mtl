[comment encoding = UTF-8 /]
[module generateSimpleSelectMethodsImpl('http://www.unamur.be/polystore/Pml')]
[import be::unamur::polystore::acceleo::main::mappingrules::util /]
[import be::unamur::polystore::acceleo::main::generateJavaDataType /]
[import be::unamur::polystore::acceleo::main::util /]
[import be::unamur::polystore::acceleo::main::level2::select::entitytype::generateSimpleSelectFromGivenRelationalTable /]
[import be::unamur::polystore::acceleo::main::level2::select::entitytype::generateSimpleSelectFromGivenDocumentCollection /]

[comment get{E}List({E)AttributeCondition /]

[template public generateSimpleSelectMethodsImpl(entityType: EntityType, conceptualSchema: ConceptualSchema)]{
	List<Dataset<[entityType.name.toUpperFirst() /]>> datasets = new ArrayList<Dataset<[entityType.name.toUpperFirst() /]>>();
	Dataset<[entityType.name.toUpperFirst()/]> d = null;
	[for (struct: AbstractPhysicalStructure | getConcernedPhysicalStructures(entityType, entityType.ancestors(Domainmodel)->first()))]
	[if (struct.oclIsTypeOf(pml::EmbeddedObject) = false)]
	[for (db: Database | getConcernedDatabases(struct, entityType.ancestors(Domainmodel)->first()))]
	d = get[entityType.name.toUpperFirst() /]ListIn[struct.name.toUpperFirst()/]From[db.name.toUpperFirst() /](condition);
	if(d != null)
		datasets.add(d);
	[/for]
	[/if]
	[/for]
	
	if(datasets.size() == 0)
		return null;

	d = datasets.get(0);
	if(datasets.size() == 1)
		return d;

	
	[if (entityType.identifier.oclIsUndefined() = false and entityType.identifier.attributes-> size() > 0)]
	List<String> idFields = new ArrayList<String>();
	[for (attr : Attribute | entityType.identifier.attributes)]
	idFields.add("[attr.name /]");
	[/for]
	scala.collection.Seq<String> seq = scala.collection.JavaConverters.asScalaIteratorConverter(idFields.iterator()).asScala().toSeq();
	Dataset<Row> res = d.join(datasets.get(1)
[for (attr : Attribute | entityType.attributes)][if (entityType.identifier.attributes->includes(attr) = false)]
						.withColumnRenamed("[attr.name.toLowerFirst() /]", "[attr.name.toLowerFirst() /]_1")
[/if][/for]						, seq, "fullouter");
	for(int i = 2; i < datasets.size(); i++) {
		res = res.join(datasets.get(i)
[for (attr : Attribute | entityType.attributes)][if (entityType.identifier.attributes->includes(attr) = false)]
						.withColumnRenamed("[attr.name.toLowerFirst() /]", "[attr.name.toLowerFirst() /]_" + i)
[/if][/for]						, seq, "fullouter");
	} 
	d = res.map((MapFunction<Row, [entityType.name.toUpperFirst() /]>) r -> {
			[entityType.name.toUpperFirst() /] [entityType.name.toLowerFirst() /]_res = new [entityType.name.toUpperFirst() /]();
			[for (attr : Attribute | entityType.attributes)]
			
			// attribute '[entityType.name.toUpperFirst() /].[attr.name.toLowerFirst() /]'
			[generateJavaType(attr.type) /] firstNotNull_[attr.name /] = r.getAs("[attr.name.toLowerFirst() /]");
			[if (entityType.identifier.attributes->includes(attr) = false)]
			for (int i = 1; i < datasets.size(); i++) {
				[generateJavaType(attr.type) /] [attr.name.toLowerFirst() /]2 = r.getAs("[attr.name.toLowerFirst() /]_" + i);
				if (firstNotNull_[attr.name /] != null && [attr.name.toLowerFirst() /]2 != null && !firstNotNull_[attr.name/].equals([attr.name.toLowerFirst() /]2)) {
					// TODO logger
					System.out.println("data consistency problem: duplicate values for attribute : '[entityType.name.toUpperFirst() /].[attr.name.toLowerFirst() /]' ==> " + firstNotNull_[attr.name /] + " and " + [attr.name.toLowerFirst() /]2);
				}
				if (firstNotNull_[attr.name /] == null && [attr.name.toLowerFirst() /]2 != null) {
					firstNotNull_[attr.name /] = [attr.name.toLowerFirst() /]2;
				}
			}
			[/if]
			[entityType.name.toLowerFirst() /]_res.set[attr.name.toUpperFirst() /](firstNotNull_[attr.name /]);
			[/for]
			return [entityType.name.toLowerFirst() /]_res;
		}, Encoders.kryo([entityType.name.toUpperFirst() /].class));
	return d;
	[else]
	for(int i = 1; i < datasets.size(); i++)
		d = d.union(datasets.get(i));
	return d;
	[/if]
	
}[/template]


[comment List<Customer> getCustomerListInCustomerFromMyMariabDB(Condition) /]

[template public generateSimpleSelectFromGivenDatabase(ent : EntityType, struct: AbstractPhysicalStructure, db : Database)]{
[if (db.dbType = pml::DatabaseType::MARIADB or db.dbType = pml::DatabaseType::SQLITE)]
[generateSimpleSelectFromGivenRelationalTable(ent, struct, db) /]
[elseif (db.dbType = pml::DatabaseType::MONGODB)]
[generateSimpleSelectFromGivenDocumentCollection(ent, struct, db) /]
[else]return null;
[/if]	
	
}[/template]





